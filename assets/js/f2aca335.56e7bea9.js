(self.webpackChunkdocs_synckit=self.webpackChunkdocs_synckit||[]).push([[8081],{3905:function(e,n,t){"use strict";t.d(n,{Zo:function(){return d},kt:function(){return p}});var i=t(7294);function o(e,n,t){return n in e?Object.defineProperty(e,n,{value:t,enumerable:!0,configurable:!0,writable:!0}):e[n]=t,e}function r(e,n){var t=Object.keys(e);if(Object.getOwnPropertySymbols){var i=Object.getOwnPropertySymbols(e);n&&(i=i.filter((function(n){return Object.getOwnPropertyDescriptor(e,n).enumerable}))),t.push.apply(t,i)}return t}function c(e){for(var n=1;n<arguments.length;n++){var t=null!=arguments[n]?arguments[n]:{};n%2?r(Object(t),!0).forEach((function(n){o(e,n,t[n])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(t)):r(Object(t)).forEach((function(n){Object.defineProperty(e,n,Object.getOwnPropertyDescriptor(t,n))}))}return e}function a(e,n){if(null==e)return{};var t,i,o=function(e,n){if(null==e)return{};var t,i,o={},r=Object.keys(e);for(i=0;i<r.length;i++)t=r[i],n.indexOf(t)>=0||(o[t]=e[t]);return o}(e,n);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(e);for(i=0;i<r.length;i++)t=r[i],n.indexOf(t)>=0||Object.prototype.propertyIsEnumerable.call(e,t)&&(o[t]=e[t])}return o}var l=i.createContext({}),s=function(e){var n=i.useContext(l),t=n;return e&&(t="function"==typeof e?e(n):c(c({},n),e)),t},d=function(e){var n=s(e.components);return i.createElement(l.Provider,{value:n},e.children)},h={inlineCode:"code",wrapper:function(e){var n=e.children;return i.createElement(i.Fragment,{},n)}},u=i.forwardRef((function(e,n){var t=e.components,o=e.mdxType,r=e.originalType,l=e.parentName,d=a(e,["components","mdxType","originalType","parentName"]),u=s(t),p=o,f=u["".concat(l,".").concat(p)]||u[p]||h[p]||r;return t?i.createElement(f,c(c({ref:n},d),{},{components:t})):i.createElement(f,c({ref:n},d))}));function p(e,n){var t=arguments,o=n&&n.mdxType;if("string"==typeof e||o){var r=t.length,c=new Array(r);c[0]=u;var a={};for(var l in n)hasOwnProperty.call(n,l)&&(a[l]=n[l]);a.originalType=e,a.mdxType="string"==typeof e?e:o,c[1]=a;for(var s=2;s<r;s++)c[s]=t[s];return i.createElement.apply(null,c)}return i.createElement.apply(null,t)}u.displayName="MDXCreateElement"},2951:function(e,n,t){"use strict";t.r(n),t.d(n,{frontMatter:function(){return a},contentTitle:function(){return l},metadata:function(){return s},toc:function(){return d},default:function(){return u}});var i=t(2122),o=t(9756),r=(t(7294),t(3905)),c=["components"],a={},l="Extensions on NSNotification",s={unversionedId:"api/core/NSNotification",id:"api/core/NSNotification",isDocsHomePage:!1,title:"Extensions on NSNotification",description:"Properties",source:"@site/docs/api/core/NSNotification.md",sourceDirName:"api/core",slug:"/api/core/NSNotification",permalink:"/SyncKit/api/core/NSNotification",version:"current",frontMatter:{},sidebar:"API",previous:{title:"ModelAdapter",permalink:"/SyncKit/api/core/ModelAdapter"},next:{title:"Extensions on Notification.Name",permalink:"/SyncKit/api/core/Notification_Name"}},d=[{value:"Properties",id:"properties",children:[{value:"<code>ModelAdapterHasChangesNotification</code>",id:"modeladapterhaschangesnotification",children:[]},{value:"<code>CloudKitSynchronizerWillSynchronizeNotification</code>",id:"cloudkitsynchronizerwillsynchronizenotification",children:[]},{value:"<code>CloudKitSynchronizerWillFetchChangesNotification</code>",id:"cloudkitsynchronizerwillfetchchangesnotification",children:[]},{value:"<code>CloudKitSynchronizerWillUploadChangesNotification</code>",id:"cloudkitsynchronizerwilluploadchangesnotification",children:[]},{value:"<code>CloudKitSynchronizerDidSynchronizeNotification</code>",id:"cloudkitsynchronizerdidsynchronizenotification",children:[]},{value:"<code>CloudKitSynchronizerDidFailToSynchronizeNotification</code>",id:"cloudkitsynchronizerdidfailtosynchronizenotification",children:[]}]}],h={toc:d};function u(e){var n=e.components,t=(0,o.Z)(e,c);return(0,r.kt)("wrapper",(0,i.Z)({},h,t,{components:n,mdxType:"MDXLayout"}),(0,r.kt)("h1",{id:"extensions-on-nsnotification"},"Extensions on NSNotification"),(0,r.kt)("h2",{id:"properties"},"Properties"),(0,r.kt)("h3",{id:"modeladapterhaschangesnotification"},(0,r.kt)("inlineCode",{parentName:"h3"},"ModelAdapterHasChangesNotification")),(0,r.kt)("p",null,"/// Sent by the model adapter when it detects changes to some objects. The notification is sent only once, if there were no changes before and new changes were detected."),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-swift"},'static let ModelAdapterHasChangesNotification: NSString = "QSModelAdapterHasChangesNotification"\n')),(0,r.kt)("h3",{id:"cloudkitsynchronizerwillsynchronizenotification"},(0,r.kt)("inlineCode",{parentName:"h3"},"CloudKitSynchronizerWillSynchronizeNotification")),(0,r.kt)("p",null,"Sent when the synchronizer is going to start a sync with CloudKit."),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-swift"},'static let CloudKitSynchronizerWillSynchronizeNotification: NSString = "QSCloudKitSynchronizerWillSynchronizeNotification"\n')),(0,r.kt)("h3",{id:"cloudkitsynchronizerwillfetchchangesnotification"},(0,r.kt)("inlineCode",{parentName:"h3"},"CloudKitSynchronizerWillFetchChangesNotification")),(0,r.kt)("p",null,"Sent when the synchronizer is going to start the fetch stage, where it downloads any new changes from CloudKit."),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-swift"},'static let CloudKitSynchronizerWillFetchChangesNotification: NSString = "QSCloudKitSynchronizerWillFetchChangesNotification"\n')),(0,r.kt)("h3",{id:"cloudkitsynchronizerwilluploadchangesnotification"},(0,r.kt)("inlineCode",{parentName:"h3"},"CloudKitSynchronizerWillUploadChangesNotification")),(0,r.kt)("p",null,"Sent when the synchronizer is going to start the upload stage, where it sends changes to CloudKit."),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-swift"},'static let CloudKitSynchronizerWillUploadChangesNotification: NSString = "QSCloudKitSynchronizerWillUploadChangesNotification"\n')),(0,r.kt)("h3",{id:"cloudkitsynchronizerdidsynchronizenotification"},(0,r.kt)("inlineCode",{parentName:"h3"},"CloudKitSynchronizerDidSynchronizeNotification")),(0,r.kt)("p",null,"Sent when the synchronizer finishes syncing."),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-swift"},'static let CloudKitSynchronizerDidSynchronizeNotification: NSString = "QSCloudKitSynchronizerDidSynchronizeNotification"\n')),(0,r.kt)("h3",{id:"cloudkitsynchronizerdidfailtosynchronizenotification"},(0,r.kt)("inlineCode",{parentName:"h3"},"CloudKitSynchronizerDidFailToSynchronizeNotification")),(0,r.kt)("p",null,"Sent when the synchronizer encounters an error while syncing."),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-swift"},'static let CloudKitSynchronizerDidFailToSynchronizeNotification: NSString = "QSCloudKitSynchronizerDidFailToSynchronizeNotification"\n')))}u.isMDXComponent=!0}}]);