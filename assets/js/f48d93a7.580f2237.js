(window.webpackJsonp=window.webpackJsonp||[]).push([[57],{125:function(e,t,a){"use strict";a.r(t),a.d(t,"frontMatter",(function(){return o})),a.d(t,"metadata",(function(){return l})),a.d(t,"toc",(function(){return i})),a.d(t,"default",(function(){return d}));var n=a(3),r=a(7),c=(a(0),a(130)),o={},l={unversionedId:"CoreDataAPI/classes/CoreDataAdapter",id:"CoreDataAPI/classes/CoreDataAdapter",isDocsHomePage:!1,title:"CoreDataAdapter",description:"CLASS",source:"@site/docs/CoreDataAPI/classes/CoreDataAdapter.md",slug:"/CoreDataAPI/classes/CoreDataAdapter",permalink:"/SyncKit/CoreDataAPI/classes/CoreDataAdapter",version:"current",sidebar:"api",previous:{title:"CloudKitSynchronizerCoreData",permalink:"/SyncKit/CoreDataAPI/classes/CloudKitSynchronizerCoreData"},next:{title:"CoreDataStack",permalink:"/SyncKit/CoreDataAPI/classes/CoreDataStack"}},i=[{value:"Properties",id:"properties",children:[{value:"<code>targetContext</code>",id:"targetcontext",children:[]},{value:"<code>delegate</code>",id:"delegate",children:[]},{value:"<code>recordProcessingDelegate</code>",id:"recordprocessingdelegate",children:[]},{value:"<code>conflictDelegate</code>",id:"conflictdelegate",children:[]},{value:"<code>recordZoneID</code>",id:"recordzoneid",children:[]},{value:"<code>mergePolicy</code>",id:"mergepolicy",children:[]},{value:"<code>forceDataTypeInsteadOfAsset</code>",id:"forcedatatypeinsteadofasset",children:[]},{value:"<code>hasChanges</code>",id:"haschanges",children:[]}]},{value:"Methods",id:"methods",children:[{value:"<code>init(persistenceStack:targetContext:recordZoneID:delegate:)</code>",id:"initpersistencestacktargetcontextrecordzoneiddelegate",children:[]}]}],b={toc:i};function d(e){var t=e.components,a=Object(r.a)(e,["components"]);return Object(c.b)("wrapper",Object(n.a)({},b,a,{components:t,mdxType:"MDXLayout"}),Object(c.b)("p",null,Object(c.b)("strong",{parentName:"p"},"CLASS")),Object(c.b)("h1",{id:"coredataadapter"},Object(c.b)("inlineCode",{parentName:"h1"},"CoreDataAdapter")),Object(c.b)("pre",null,Object(c.b)("code",{parentName:"pre",className:"language-swift"},"@objc public class CoreDataAdapter: NSObject, ModelAdapter\n")),Object(c.b)("p",null,"Implementation of ",Object(c.b)("inlineCode",{parentName:"p"},"ModelAdapter")," for Core Data models."),Object(c.b)("h2",{id:"properties"},"Properties"),Object(c.b)("h3",{id:"targetcontext"},Object(c.b)("inlineCode",{parentName:"h3"},"targetContext")),Object(c.b)("pre",null,Object(c.b)("code",{parentName:"pre",className:"language-swift"},"@objc public let targetContext: NSManagedObjectContext\n")),Object(c.b)("p",null,"The target ",Object(c.b)("inlineCode",{parentName:"p"},"NSManagedObjectContext")," that will be tracked. (read-only)"),Object(c.b)("h3",{id:"delegate"},Object(c.b)("inlineCode",{parentName:"h3"},"delegate")),Object(c.b)("pre",null,Object(c.b)("code",{parentName:"pre",className:"language-swift"},"@objc public let delegate: CoreDataAdapterDelegate\n")),Object(c.b)("h3",{id:"recordprocessingdelegate"},Object(c.b)("inlineCode",{parentName:"h3"},"recordProcessingDelegate")),Object(c.b)("pre",null,Object(c.b)("code",{parentName:"pre",className:"language-swift"},"@objc public weak var recordProcessingDelegate: CoreDataAdapterRecordProcessing?\n")),Object(c.b)("h3",{id:"conflictdelegate"},Object(c.b)("inlineCode",{parentName:"h3"},"conflictDelegate")),Object(c.b)("pre",null,Object(c.b)("code",{parentName:"pre",className:"language-swift"},"@objc public var conflictDelegate: CoreDataAdapterConflictResolutionDelegate?\n")),Object(c.b)("h3",{id:"recordzoneid"},Object(c.b)("inlineCode",{parentName:"h3"},"recordZoneID")),Object(c.b)("pre",null,Object(c.b)("code",{parentName:"pre",className:"language-swift"},"@objc public let recordZoneID: CKRecordZone.ID\n")),Object(c.b)("p",null,"Record Zone that is kept in sync with this adapter's ",Object(c.b)("inlineCode",{parentName:"p"},"NSManagedObjectContext"),"."),Object(c.b)("h3",{id:"mergepolicy"},Object(c.b)("inlineCode",{parentName:"h3"},"mergePolicy")),Object(c.b)("pre",null,Object(c.b)("code",{parentName:"pre",className:"language-swift"},"@objc public var mergePolicy: MergePolicy = .server\n")),Object(c.b)("p",null,"Merge policy in case of conflicts. Default value is ",Object(c.b)("inlineCode",{parentName:"p"},"server"),"."),Object(c.b)("h3",{id:"forcedatatypeinsteadofasset"},Object(c.b)("inlineCode",{parentName:"h3"},"forceDataTypeInsteadOfAsset")),Object(c.b)("pre",null,Object(c.b)("code",{parentName:"pre",className:"language-swift"},"@objc public var forceDataTypeInsteadOfAsset = false\n")),Object(c.b)("p",null,"By default objects with ",Object(c.b)("inlineCode",{parentName:"p"},"Data")," values will be uploaded as a ",Object(c.b)("inlineCode",{parentName:"p"},"CKRecord")," with a ",Object(c.b)("inlineCode",{parentName:"p"},"CKAsset")," field. Set this property to ",Object(c.b)("inlineCode",{parentName:"p"},"true")," to force using ",Object(c.b)("inlineCode",{parentName:"p"},"Data")," in the record instead."),Object(c.b)("h3",{id:"haschanges"},Object(c.b)("inlineCode",{parentName:"h3"},"hasChanges")),Object(c.b)("pre",null,Object(c.b)("code",{parentName:"pre",className:"language-swift"},"public var hasChanges = false\n")),Object(c.b)("p",null,"Whether the target context has made any changes that have not been synced to CloudKit yet."),Object(c.b)("h2",{id:"methods"},"Methods"),Object(c.b)("h3",{id:"initpersistencestacktargetcontextrecordzoneiddelegate"},Object(c.b)("inlineCode",{parentName:"h3"},"init(persistenceStack:targetContext:recordZoneID:delegate:)")),Object(c.b)("pre",null,Object(c.b)("code",{parentName:"pre",className:"language-swift"},"@objc public init(persistenceStack: CoreDataStack, targetContext: NSManagedObjectContext, recordZoneID: CKRecordZone.ID, delegate: CoreDataAdapterDelegate)\n")),Object(c.b)("p",null,"Initialize a new ",Object(c.b)("inlineCode",{parentName:"p"},"CoreDataAdapter"),"."),Object(c.b)("ul",null,Object(c.b)("li",{parentName:"ul"},"Parameters:",Object(c.b)("ul",{parentName:"li"},Object(c.b)("li",{parentName:"ul"},"persistenceStack: ",Object(c.b)("inlineCode",{parentName:"li"},"CoreDataStack")," for internal state."),Object(c.b)("li",{parentName:"ul"},"targetContext: ",Object(c.b)("inlineCode",{parentName:"li"},"NSManagedObjectContext")," to keep in sync with CloudKit."),Object(c.b)("li",{parentName:"ul"},"recordZoneID: ",Object(c.b)("inlineCode",{parentName:"li"},"CKRecordZone.ID")," of the record zone that will be used on CloudKit."),Object(c.b)("li",{parentName:"ul"},"delegate: ",Object(c.b)("inlineCode",{parentName:"li"},"CoreDataAdapterDelegate")," to trigger saves in the target context.")))),Object(c.b)("h4",{id:"parameters"},"Parameters"),Object(c.b)("table",null,Object(c.b)("thead",{parentName:"table"},Object(c.b)("tr",{parentName:"thead"},Object(c.b)("th",{parentName:"tr",align:null},"Name"),Object(c.b)("th",{parentName:"tr",align:null},"Description"))),Object(c.b)("tbody",{parentName:"table"},Object(c.b)("tr",{parentName:"tbody"},Object(c.b)("td",{parentName:"tr",align:null},"persistenceStack"),Object(c.b)("td",{parentName:"tr",align:null},Object(c.b)("inlineCode",{parentName:"td"},"CoreDataStack")," for internal state.")),Object(c.b)("tr",{parentName:"tbody"},Object(c.b)("td",{parentName:"tr",align:null},"targetContext"),Object(c.b)("td",{parentName:"tr",align:null},Object(c.b)("inlineCode",{parentName:"td"},"NSManagedObjectContext")," to keep in sync with CloudKit.")),Object(c.b)("tr",{parentName:"tbody"},Object(c.b)("td",{parentName:"tr",align:null},"recordZoneID"),Object(c.b)("td",{parentName:"tr",align:null},Object(c.b)("inlineCode",{parentName:"td"},"CKRecordZone.ID")," of the record zone that will be used on CloudKit.")),Object(c.b)("tr",{parentName:"tbody"},Object(c.b)("td",{parentName:"tr",align:null},"delegate"),Object(c.b)("td",{parentName:"tr",align:null},Object(c.b)("inlineCode",{parentName:"td"},"CoreDataAdapterDelegate")," to trigger saves in the target context.")))))}d.isMDXComponent=!0},130:function(e,t,a){"use strict";a.d(t,"a",(function(){return p})),a.d(t,"b",(function(){return O}));var n=a(0),r=a.n(n);function c(e,t,a){return t in e?Object.defineProperty(e,t,{value:a,enumerable:!0,configurable:!0,writable:!0}):e[t]=a,e}function o(e,t){var a=Object.keys(e);if(Object.getOwnPropertySymbols){var n=Object.getOwnPropertySymbols(e);t&&(n=n.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),a.push.apply(a,n)}return a}function l(e){for(var t=1;t<arguments.length;t++){var a=null!=arguments[t]?arguments[t]:{};t%2?o(Object(a),!0).forEach((function(t){c(e,t,a[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(a)):o(Object(a)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(a,t))}))}return e}function i(e,t){if(null==e)return{};var a,n,r=function(e,t){if(null==e)return{};var a,n,r={},c=Object.keys(e);for(n=0;n<c.length;n++)a=c[n],t.indexOf(a)>=0||(r[a]=e[a]);return r}(e,t);if(Object.getOwnPropertySymbols){var c=Object.getOwnPropertySymbols(e);for(n=0;n<c.length;n++)a=c[n],t.indexOf(a)>=0||Object.prototype.propertyIsEnumerable.call(e,a)&&(r[a]=e[a])}return r}var b=r.a.createContext({}),d=function(e){var t=r.a.useContext(b),a=t;return e&&(a="function"==typeof e?e(t):l(l({},t),e)),a},p=function(e){var t=d(e.components);return r.a.createElement(b.Provider,{value:t},e.children)},s={inlineCode:"code",wrapper:function(e){var t=e.children;return r.a.createElement(r.a.Fragment,{},t)}},u=r.a.forwardRef((function(e,t){var a=e.components,n=e.mdxType,c=e.originalType,o=e.parentName,b=i(e,["components","mdxType","originalType","parentName"]),p=d(a),u=n,O=p["".concat(o,".").concat(u)]||p[u]||s[u]||c;return a?r.a.createElement(O,l(l({ref:t},b),{},{components:a})):r.a.createElement(O,l({ref:t},b))}));function O(e,t){var a=arguments,n=t&&t.mdxType;if("string"==typeof e||n){var c=a.length,o=new Array(c);o[0]=u;var l={};for(var i in t)hasOwnProperty.call(t,i)&&(l[i]=t[i]);l.originalType=e,l.mdxType="string"==typeof e?e:n,o[1]=l;for(var b=2;b<c;b++)o[b]=a[b];return r.a.createElement.apply(null,o)}return r.a.createElement.apply(null,a)}u.displayName="MDXCreateElement"}}]);