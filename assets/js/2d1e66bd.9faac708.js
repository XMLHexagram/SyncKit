(self.webpackChunkdocs_synckit=self.webpackChunkdocs_synckit||[]).push([[5434],{3905:function(e,n,t){"use strict";t.d(n,{Zo:function(){return h},kt:function(){return u}});var r=t(7294);function i(e,n,t){return n in e?Object.defineProperty(e,n,{value:t,enumerable:!0,configurable:!0,writable:!0}):e[n]=t,e}function o(e,n){var t=Object.keys(e);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(e);n&&(r=r.filter((function(n){return Object.getOwnPropertyDescriptor(e,n).enumerable}))),t.push.apply(t,r)}return t}function a(e){for(var n=1;n<arguments.length;n++){var t=null!=arguments[n]?arguments[n]:{};n%2?o(Object(t),!0).forEach((function(n){i(e,n,t[n])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(t)):o(Object(t)).forEach((function(n){Object.defineProperty(e,n,Object.getOwnPropertyDescriptor(t,n))}))}return e}function c(e,n){if(null==e)return{};var t,r,i=function(e,n){if(null==e)return{};var t,r,i={},o=Object.keys(e);for(r=0;r<o.length;r++)t=o[r],n.indexOf(t)>=0||(i[t]=e[t]);return i}(e,n);if(Object.getOwnPropertySymbols){var o=Object.getOwnPropertySymbols(e);for(r=0;r<o.length;r++)t=o[r],n.indexOf(t)>=0||Object.prototype.propertyIsEnumerable.call(e,t)&&(i[t]=e[t])}return i}var l=r.createContext({}),s=function(e){var n=r.useContext(l),t=n;return e&&(t="function"==typeof e?e(n):a(a({},n),e)),t},h=function(e){var n=s(e.components);return r.createElement(l.Provider,{value:n},e.children)},d={inlineCode:"code",wrapper:function(e){var n=e.children;return r.createElement(r.Fragment,{},n)}},p=r.forwardRef((function(e,n){var t=e.components,i=e.mdxType,o=e.originalType,l=e.parentName,h=c(e,["components","mdxType","originalType","parentName"]),p=s(t),u=i,y=p["".concat(l,".").concat(u)]||p[u]||d[u]||o;return t?r.createElement(y,a(a({ref:n},h),{},{components:t})):r.createElement(y,a({ref:n},h))}));function u(e,n){var t=arguments,i=n&&n.mdxType;if("string"==typeof e||i){var o=t.length,a=new Array(o);a[0]=p;var c={};for(var l in n)hasOwnProperty.call(n,l)&&(c[l]=n[l]);c.originalType=e,c.mdxType="string"==typeof e?e:i,a[1]=c;for(var s=2;s<o;s++)a[s]=t[s];return r.createElement.apply(null,a)}return r.createElement.apply(null,t)}p.displayName="MDXCreateElement"},4957:function(e,n,t){"use strict";t.r(n),t.d(n,{frontMatter:function(){return c},contentTitle:function(){return l},metadata:function(){return s},toc:function(){return h},default:function(){return p}});var r=t(2122),i=t(9756),o=(t(7294),t(3905)),a=["components"],c={},l="Extensions on Notification.Name",s={unversionedId:"api/core/Notification_Name",id:"api/core/Notification_Name",isDocsHomePage:!1,title:"Extensions on Notification.Name",description:"Properties",source:"@site/docs/api/core/Notification_Name.md",sourceDirName:"api/core",slug:"/api/core/Notification_Name",permalink:"/SyncKit/api/core/Notification_Name",version:"current",frontMatter:{},sidebar:"API",previous:{title:"Extensions on NSNotification",permalink:"/SyncKit/api/core/NSNotification"},next:{title:"ParentKey",permalink:"/SyncKit/api/core/ParentKey"}},h=[{value:"Properties",id:"properties",children:[{value:"<code>ModelAdapterHasChangesNotification</code>",id:"modeladapterhaschangesnotification",children:[]},{value:"<code>SynchronizerWillSynchronize</code>",id:"synchronizerwillsynchronize",children:[]},{value:"<code>SynchronizerWillFetchChanges</code>",id:"synchronizerwillfetchchanges",children:[]},{value:"<code>SynchronizerWillUploadChanges</code>",id:"synchronizerwilluploadchanges",children:[]},{value:"<code>SynchronizerDidSynchronize</code>",id:"synchronizerdidsynchronize",children:[]},{value:"<code>SynchronizerDidFailToSynchronize</code>",id:"synchronizerdidfailtosynchronize",children:[]}]}],d={toc:h};function p(e){var n=e.components,t=(0,i.Z)(e,a);return(0,o.kt)("wrapper",(0,r.Z)({},d,t,{components:n,mdxType:"MDXLayout"}),(0,o.kt)("h1",{id:"extensions-on-notificationname"},"Extensions on Notification.Name"),(0,o.kt)("h2",{id:"properties"},"Properties"),(0,o.kt)("h3",{id:"modeladapterhaschangesnotification"},(0,o.kt)("inlineCode",{parentName:"h3"},"ModelAdapterHasChangesNotification")),(0,o.kt)("p",null,"Sent by the model adapter when it detects changes to some objects. The notification is sent only once, if there were no changes before and new changes were detected."),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-swift"},"static let ModelAdapterHasChangesNotification \n")),(0,o.kt)("h3",{id:"synchronizerwillsynchronize"},(0,o.kt)("inlineCode",{parentName:"h3"},"SynchronizerWillSynchronize")),(0,o.kt)("p",null,"Sent when the synchronizer is going to start a sync with CloudKit."),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-swift"},"static let SynchronizerWillSynchronize \n")),(0,o.kt)("h3",{id:"synchronizerwillfetchchanges"},(0,o.kt)("inlineCode",{parentName:"h3"},"SynchronizerWillFetchChanges")),(0,o.kt)("p",null,"Sent when the synchronizer is going to start the fetch stage, where it downloads any new changes from CloudKit."),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-swift"},"static let SynchronizerWillFetchChanges \n")),(0,o.kt)("h3",{id:"synchronizerwilluploadchanges"},(0,o.kt)("inlineCode",{parentName:"h3"},"SynchronizerWillUploadChanges")),(0,o.kt)("p",null,"Sent when the synchronizer is going to start the upload stage, where it sends changes to CloudKit."),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-swift"},"static let SynchronizerWillUploadChanges \n")),(0,o.kt)("h3",{id:"synchronizerdidsynchronize"},(0,o.kt)("inlineCode",{parentName:"h3"},"SynchronizerDidSynchronize")),(0,o.kt)("p",null,"Sent when the synchronizer finishes syncing."),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-swift"},"static let SynchronizerDidSynchronize \n")),(0,o.kt)("h3",{id:"synchronizerdidfailtosynchronize"},(0,o.kt)("inlineCode",{parentName:"h3"},"SynchronizerDidFailToSynchronize")),(0,o.kt)("p",null,"Sent when the synchronizer encounters an error while syncing."),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-swift"},"static let SynchronizerDidFailToSynchronize \n")))}p.isMDXComponent=!0}}]);