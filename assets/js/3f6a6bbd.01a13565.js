(window.webpackJsonp=window.webpackJsonp||[]).push([[20],{132:function(e,t,r){"use strict";r.d(t,"a",(function(){return d})),r.d(t,"b",(function(){return b}));var a=r(0),n=r.n(a);function o(e,t,r){return t in e?Object.defineProperty(e,t,{value:r,enumerable:!0,configurable:!0,writable:!0}):e[t]=r,e}function c(e,t){var r=Object.keys(e);if(Object.getOwnPropertySymbols){var a=Object.getOwnPropertySymbols(e);t&&(a=a.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),r.push.apply(r,a)}return r}function l(e){for(var t=1;t<arguments.length;t++){var r=null!=arguments[t]?arguments[t]:{};t%2?c(Object(r),!0).forEach((function(t){o(e,t,r[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(r)):c(Object(r)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(r,t))}))}return e}function i(e,t){if(null==e)return{};var r,a,n=function(e,t){if(null==e)return{};var r,a,n={},o=Object.keys(e);for(a=0;a<o.length;a++)r=o[a],t.indexOf(r)>=0||(n[r]=e[r]);return n}(e,t);if(Object.getOwnPropertySymbols){var o=Object.getOwnPropertySymbols(e);for(a=0;a<o.length;a++)r=o[a],t.indexOf(r)>=0||Object.prototype.propertyIsEnumerable.call(e,r)&&(n[r]=e[r])}return n}var p=n.a.createContext({}),s=function(e){var t=n.a.useContext(p),r=t;return e&&(r="function"==typeof e?e(t):l(l({},t),e)),r},d=function(e){var t=s(e.components);return n.a.createElement(p.Provider,{value:t},e.children)},u={inlineCode:"code",wrapper:function(e){var t=e.children;return n.a.createElement(n.a.Fragment,{},t)}},m=n.a.forwardRef((function(e,t){var r=e.components,a=e.mdxType,o=e.originalType,c=e.parentName,p=i(e,["components","mdxType","originalType","parentName"]),d=s(r),m=a,b=d["".concat(c,".").concat(m)]||d[m]||u[m]||o;return r?n.a.createElement(b,l(l({ref:t},p),{},{components:r})):n.a.createElement(b,l({ref:t},p))}));function b(e,t){var r=arguments,a=t&&t.mdxType;if("string"==typeof e||a){var o=r.length,c=new Array(o);c[0]=m;var l={};for(var i in t)hasOwnProperty.call(t,i)&&(l[i]=t[i]);l.originalType=e,l.mdxType="string"==typeof e?e:a,c[1]=l;for(var p=2;p<o;p++)c[p]=r[p];return n.a.createElement.apply(null,c)}return n.a.createElement.apply(null,r)}m.displayName="MDXCreateElement"},90:function(e,t,r){"use strict";r.r(t),r.d(t,"frontMatter",(function(){return c})),r.d(t,"metadata",(function(){return l})),r.d(t,"toc",(function(){return i})),r.d(t,"default",(function(){return s}));var a=r(3),n=r(7),o=(r(0),r(132)),c={},l={unversionedId:"RealmAPI/protocols/RealmAdapterDelegate",id:"RealmAPI/protocols/RealmAdapterDelegate",isDocsHomePage:!1,title:"RealmAdapterDelegate",description:"PROTOCOL",source:"@site/docs/RealmAPI/protocols/RealmAdapterDelegate.md",slug:"/RealmAPI/protocols/RealmAdapterDelegate",permalink:"/SyncKit/RealmAPI/protocols/RealmAdapterDelegate",editUrl:"https://github.com/facebook/docusaurus/edit/master/website/docs/RealmAPI/protocols/RealmAdapterDelegate.md",version:"current",sidebar:"api",previous:{title:"MultiRealmObserver",permalink:"/SyncKit/RealmAPI/classes/MultiRealmObserver"},next:{title:"RealmAdapterRecordProcessing",permalink:"/SyncKit/RealmAPI/protocols/RealmAdapterRecordProcessing"}},i=[{value:"Methods",id:"methods",children:[{value:"<code>RealmAdapter(_:gotChanges:object:)</code>",id:"realmadapter_gotchangesobject",children:[]}]}],p={toc:i};function s(e){var t=e.components,r=Object(n.a)(e,["components"]);return Object(o.b)("wrapper",Object(a.a)({},p,r,{components:t,mdxType:"MDXLayout"}),Object(o.b)("p",null,Object(o.b)("strong",{parentName:"p"},"PROTOCOL")),Object(o.b)("h1",{id:"realmadapterdelegate"},Object(o.b)("inlineCode",{parentName:"h1"},"RealmAdapterDelegate")),Object(o.b)("pre",null,Object(o.b)("code",{parentName:"pre",className:"language-swift"},"@objc public protocol RealmAdapterDelegate\n")),Object(o.b)("h2",{id:"methods"},"Methods"),Object(o.b)("h3",{id:"realmadapter_gotchangesobject"},Object(o.b)("inlineCode",{parentName:"h3"},"RealmAdapter(_:gotChanges:object:)")),Object(o.b)("pre",null,Object(o.b)("code",{parentName:"pre",className:"language-swift"},"func RealmAdapter(_ adapter: RealmAdapter, gotChanges changes: [String: Any], object: RLMObject)\n")),Object(o.b)("p",null,"  Asks the delegate to resolve conflicts for a managed object. The delegate is expected to examine the change dictionary and optionally apply any of those changes to the managed object."),Object(o.b)("p",null,"  @param adapter    The ",Object(o.b)("inlineCode",{parentName:"p"},"QSRealmAdapter")," that is providing the changes.\n@param changeDictionary Dictionary containing keys and values with changes for the managed object. Values can be ","[NSNull null]"," to represent a nil value.\n@param object           The ",Object(o.b)("inlineCode",{parentName:"p"},"RLMObject")," that has changed on iCloud."))}s.isMDXComponent=!0}}]);