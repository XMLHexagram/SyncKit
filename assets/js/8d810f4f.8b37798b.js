(window.webpackJsonp=window.webpackJsonp||[]).push([[42],{110:function(e,t,n){"use strict";n.r(t),n.d(t,"frontMatter",(function(){return o})),n.d(t,"metadata",(function(){return l})),n.d(t,"toc",(function(){return c})),n.d(t,"default",(function(){return d}));var a=n(3),r=n(7),i=(n(0),n(132)),o={},l={unversionedId:"Core/classes/CloudKitSynchronizer",id:"Core/classes/CloudKitSynchronizer",isDocsHomePage:!1,title:"CloudKitSynchronizer",description:"CLASS",source:"@site/docs/Core/classes/CloudKitSynchronizer.md",slug:"/Core/classes/CloudKitSynchronizer",permalink:"/SyncKit/Core/classes/CloudKitSynchronizer",version:"current",sidebar:"api",next:{title:"CloudKitSynchronizerSharing",permalink:"/SyncKit/Core/classes/CloudKitSynchronizerSharing"}},c=[{value:"Properties",id:"properties",children:[{value:"<code>identifier</code>",id:"identifier",children:[]},{value:"<code>containerIdentifier</code>",id:"containeridentifier",children:[]},{value:"<code>database</code>",id:"database",children:[]},{value:"<code>adapterProvider</code>",id:"adapterprovider",children:[]},{value:"<code>keyValueStore</code>",id:"keyvaluestore",children:[]},{value:"<code>syncing</code>",id:"syncing",children:[]},{value:"<code>batchSize</code>",id:"batchsize",children:[]},{value:"<code>compatibilityVersion</code>",id:"compatibilityversion",children:[]},{value:"<code>syncMode</code>",id:"syncmode",children:[]},{value:"<code>modelAdapters</code>",id:"modeladapters",children:[]}]},{value:"Methods",id:"methods",children:[{value:"<code>init(identifier:containerIdentifier:database:adapterProvider:keyValueStore:)</code>",id:"initidentifiercontaineridentifierdatabaseadapterproviderkeyvaluestore",children:[]},{value:"<code>synchronize(completion:)</code>",id:"synchronizecompletion",children:[]},{value:"<code>cancelSynchronization()</code>",id:"cancelsynchronization",children:[]},{value:"<code>resetDatabaseToken()</code>",id:"resetdatabasetoken",children:[]},{value:"<code>eraseLocalMetadata()</code>",id:"eraselocalmetadata",children:[]},{value:"<code>deleteRecordZone(for:completion:)</code>",id:"deleterecordzoneforcompletion",children:[]},{value:"<code>addModelAdapter(_:)</code>",id:"addmodeladapter_",children:[]},{value:"<code>removeModelAdapter(_:)</code>",id:"removemodeladapter_",children:[]}]},{value:"Notifications",id:"notifications",children:[]}],b={toc:c};function d(e){var t=e.components,n=Object(r.a)(e,["components"]);return Object(i.b)("wrapper",Object(a.a)({},b,n,{components:t,mdxType:"MDXLayout"}),Object(i.b)("p",null,Object(i.b)("strong",{parentName:"p"},"CLASS")),Object(i.b)("h1",{id:"cloudkitsynchronizer"},Object(i.b)("inlineCode",{parentName:"h1"},"CloudKitSynchronizer")),Object(i.b)("pre",null,Object(i.b)("code",{parentName:"pre",className:"language-swift"},"public class CloudKitSynchronizer: NSObject\n")),Object(i.b)("p",null,"A ",Object(i.b)("inlineCode",{parentName:"p"},"CloudKitSynchronizer")," object takes care of making all the required calls to CloudKit to keep your model synchronized, using the provided\n",Object(i.b)("inlineCode",{parentName:"p"},"ModelAdapter")," to interact with it."),Object(i.b)("p",null,Object(i.b)("inlineCode",{parentName:"p"},"CloudKitSynchronizer")," will post notifications at different steps of the synchronization process."),Object(i.b)("h2",{id:"properties"},"Properties"),Object(i.b)("h3",{id:"identifier"},Object(i.b)("inlineCode",{parentName:"h3"},"identifier")),Object(i.b)("pre",null,Object(i.b)("code",{parentName:"pre",className:"language-swift"},"@objc public let identifier: String\n")),Object(i.b)("p",null,"More than one ",Object(i.b)("inlineCode",{parentName:"p"},"CloudKitSynchronizer")," may be created in an app.\nThe identifier is used to persist some state, so it should always be the same for a synchronizer \u2013if you change your app to use a different identifier state might be lost."),Object(i.b)("h3",{id:"containeridentifier"},Object(i.b)("inlineCode",{parentName:"h3"},"containerIdentifier")),Object(i.b)("pre",null,Object(i.b)("code",{parentName:"pre",className:"language-swift"},"@objc public let containerIdentifier: String\n")),Object(i.b)("p",null,"iCloud container identifier."),Object(i.b)("h3",{id:"database"},Object(i.b)("inlineCode",{parentName:"h3"},"database")),Object(i.b)("pre",null,Object(i.b)("code",{parentName:"pre",className:"language-swift"},"public let database: CloudKitDatabaseAdapter\n")),Object(i.b)("p",null,"Adapter wrapping a ",Object(i.b)("inlineCode",{parentName:"p"},"CKDatabase"),". The synchronizer will run CloudKit operations on the given database."),Object(i.b)("h3",{id:"adapterprovider"},Object(i.b)("inlineCode",{parentName:"h3"},"adapterProvider")),Object(i.b)("pre",null,Object(i.b)("code",{parentName:"pre",className:"language-swift"},"@objc public let adapterProvider: AdapterProvider\n")),Object(i.b)("p",null,"Provides the model adapter to the synchronizer."),Object(i.b)("h3",{id:"keyvaluestore"},Object(i.b)("inlineCode",{parentName:"h3"},"keyValueStore")),Object(i.b)("pre",null,Object(i.b)("code",{parentName:"pre",className:"language-swift"},"public let keyValueStore: KeyValueStore\n")),Object(i.b)("p",null,"Required by the synchronizer to persist some state. ",Object(i.b)("inlineCode",{parentName:"p"},"UserDefaults")," can be used via ",Object(i.b)("inlineCode",{parentName:"p"},"UserDefaultsAdapter"),"."),Object(i.b)("h3",{id:"syncing"},Object(i.b)("inlineCode",{parentName:"h3"},"syncing")),Object(i.b)("pre",null,Object(i.b)("code",{parentName:"pre",className:"language-swift"},"@objc public internal(set) var syncing: Bool = false\n")),Object(i.b)("p",null,"Indicates whether the instance is currently synchronizing data."),Object(i.b)("h3",{id:"batchsize"},Object(i.b)("inlineCode",{parentName:"h3"},"batchSize")),Object(i.b)("pre",null,Object(i.b)("code",{parentName:"pre",className:"language-swift"},"@objc public var batchSize: Int = CloudKitSynchronizer.defaultBatchSize\n")),Object(i.b)("p",null,"Number of records that are sent in an upload operation."),Object(i.b)("h3",{id:"compatibilityversion"},Object(i.b)("inlineCode",{parentName:"h3"},"compatibilityVersion")),Object(i.b)("pre",null,Object(i.b)("code",{parentName:"pre",className:"language-swift"},"@objc public var compatibilityVersion: Int = 0\n")),Object(i.b)("p",null,"When set, if the synchronizer finds records uploaded by a different device using a higher compatibility version,\nit will end synchronization with a ",Object(i.b)("inlineCode",{parentName:"p"},"higherModelVersionFound")," error."),Object(i.b)("h3",{id:"syncmode"},Object(i.b)("inlineCode",{parentName:"h3"},"syncMode")),Object(i.b)("pre",null,Object(i.b)("code",{parentName:"pre",className:"language-swift"},"@objc public var syncMode: SynchronizeMode = .sync\n")),Object(i.b)("p",null,"Whether the synchronizer will only download data or also upload any local changes."),Object(i.b)("h3",{id:"modeladapters"},Object(i.b)("inlineCode",{parentName:"h3"},"modelAdapters")),Object(i.b)("pre",null,Object(i.b)("code",{parentName:"pre",className:"language-swift"},"@objc public var modelAdapters: [ModelAdapter]\n")),Object(i.b)("p",null,"Model adapters in use by this synchronizer"),Object(i.b)("h2",{id:"methods"},"Methods"),Object(i.b)("h3",{id:"initidentifiercontaineridentifierdatabaseadapterproviderkeyvaluestore"},Object(i.b)("inlineCode",{parentName:"h3"},"init(identifier:containerIdentifier:database:adapterProvider:keyValueStore:)")),Object(i.b)("pre",null,Object(i.b)("code",{parentName:"pre",className:"language-swift"},"@objc public init(identifier: String, containerIdentifier: String, database: CloudKitDatabaseAdapter, adapterProvider: AdapterProvider, keyValueStore: KeyValueStore = UserDefaultsAdapter(userDefaults: UserDefaults.standard))\n")),Object(i.b)("p",null,"Initializes a newly allocated synchronizer."),Object(i.b)("ul",null,Object(i.b)("li",{parentName:"ul"},"Parameters:",Object(i.b)("ul",{parentName:"li"},Object(i.b)("li",{parentName:"ul"},"identifier: Identifier for the ",Object(i.b)("inlineCode",{parentName:"li"},"QSCloudKitSynchronizer"),"."),Object(i.b)("li",{parentName:"ul"},"containerIdentifier: Identifier of the iCloud container to be used. The application must have the right entitlements to be able to access this container."),Object(i.b)("li",{parentName:"ul"},"database: Private or Shared CloudKit Database"),Object(i.b)("li",{parentName:"ul"},"adapterProvider: ",Object(i.b)("inlineCode",{parentName:"li"},"CloudKitSynchronizerAdapterProvider")),Object(i.b)("li",{parentName:"ul"},"keyValueStore: Object conforming to KeyValueStore (",Object(i.b)("inlineCode",{parentName:"li"},"UserDefaultsAdapter"),", for example)"))),Object(i.b)("li",{parentName:"ul"},"Returns: Initialized synchronizer or ",Object(i.b)("inlineCode",{parentName:"li"},"nil")," if no iCloud container can be found with the provided identifier.")),Object(i.b)("h4",{id:"parameters"},"Parameters"),Object(i.b)("table",null,Object(i.b)("thead",{parentName:"table"},Object(i.b)("tr",{parentName:"thead"},Object(i.b)("th",{parentName:"tr",align:null},"Name"),Object(i.b)("th",{parentName:"tr",align:null},"Description"))),Object(i.b)("tbody",{parentName:"table"},Object(i.b)("tr",{parentName:"tbody"},Object(i.b)("td",{parentName:"tr",align:null},"identifier"),Object(i.b)("td",{parentName:"tr",align:null},"Identifier for the ",Object(i.b)("inlineCode",{parentName:"td"},"QSCloudKitSynchronizer"),".")),Object(i.b)("tr",{parentName:"tbody"},Object(i.b)("td",{parentName:"tr",align:null},"containerIdentifier"),Object(i.b)("td",{parentName:"tr",align:null},"Identifier of the iCloud container to be used. The application must have the right entitlements to be able to access this container.")),Object(i.b)("tr",{parentName:"tbody"},Object(i.b)("td",{parentName:"tr",align:null},"database"),Object(i.b)("td",{parentName:"tr",align:null},"Private or Shared CloudKit Database")),Object(i.b)("tr",{parentName:"tbody"},Object(i.b)("td",{parentName:"tr",align:null},"adapterProvider"),Object(i.b)("td",{parentName:"tr",align:null},Object(i.b)("inlineCode",{parentName:"td"},"CloudKitSynchronizerAdapterProvider"))),Object(i.b)("tr",{parentName:"tbody"},Object(i.b)("td",{parentName:"tr",align:null},"keyValueStore"),Object(i.b)("td",{parentName:"tr",align:null},"Object conforming to KeyValueStore (",Object(i.b)("inlineCode",{parentName:"td"},"UserDefaultsAdapter"),", for example)")))),Object(i.b)("h3",{id:"synchronizecompletion"},Object(i.b)("inlineCode",{parentName:"h3"},"synchronize(completion:)")),Object(i.b)("pre",null,Object(i.b)("code",{parentName:"pre",className:"language-swift"},"@objc public func synchronize(completion: ((Error?) -> ())?)\n")),Object(i.b)("p",null,"Synchronize data with CloudKit."),Object(i.b)("ul",null,Object(i.b)("li",{parentName:"ul"},"Parameter completion: Completion block that receives an optional error. Could be a ",Object(i.b)("inlineCode",{parentName:"li"},"SyncError"),", ",Object(i.b)("inlineCode",{parentName:"li"},"CKError"),", or any other error found during synchronization.")),Object(i.b)("h4",{id:"parameters-1"},"Parameters"),Object(i.b)("table",null,Object(i.b)("thead",{parentName:"table"},Object(i.b)("tr",{parentName:"thead"},Object(i.b)("th",{parentName:"tr",align:null},"Name"),Object(i.b)("th",{parentName:"tr",align:null},"Description"))),Object(i.b)("tbody",{parentName:"table"},Object(i.b)("tr",{parentName:"tbody"},Object(i.b)("td",{parentName:"tr",align:null},"completion"),Object(i.b)("td",{parentName:"tr",align:null},"Completion block that receives an optional error. Could be a ",Object(i.b)("inlineCode",{parentName:"td"},"SyncError"),", ",Object(i.b)("inlineCode",{parentName:"td"},"CKError"),", or any other error found during synchronization.")))),Object(i.b)("h3",{id:"cancelsynchronization"},Object(i.b)("inlineCode",{parentName:"h3"},"cancelSynchronization()")),Object(i.b)("pre",null,Object(i.b)("code",{parentName:"pre",className:"language-swift"},"@objc public func cancelSynchronization()\n")),Object(i.b)("p",null,"Cancel synchronization. It will cause a current synchronization to end with a ",Object(i.b)("inlineCode",{parentName:"p"},"cancelled")," error."),Object(i.b)("h3",{id:"resetdatabasetoken"},Object(i.b)("inlineCode",{parentName:"h3"},"resetDatabaseToken()")),Object(i.b)("pre",null,Object(i.b)("code",{parentName:"pre",className:"language-swift"},"@objc public func resetDatabaseToken()\n")),Object(i.b)("p",null," Deletes saved database token, so next synchronization will include changes in all record zones in the database.\nThis does not reset tokens stored by model adapters."),Object(i.b)("h3",{id:"eraselocalmetadata"},Object(i.b)("inlineCode",{parentName:"h3"},"eraseLocalMetadata()")),Object(i.b)("pre",null,Object(i.b)("code",{parentName:"pre",className:"language-swift"},"@objc public func eraseLocalMetadata()\n")),Object(i.b)("p",null,"Deletes saved database token and all local metadata used to track changes in models.\nThe synchronizer should not be used after calling this function, create a new synchronizer instead if you need it."),Object(i.b)("h3",{id:"deleterecordzoneforcompletion"},Object(i.b)("inlineCode",{parentName:"h3"},"deleteRecordZone(for:completion:)")),Object(i.b)("pre",null,Object(i.b)("code",{parentName:"pre",className:"language-swift"},"@objc public func deleteRecordZone(for adapter: ModelAdapter, completion: ((Error?)->())?)\n")),Object(i.b)("p",null,"Deletes the corresponding record zone on CloudKit, along with any data in it."),Object(i.b)("ul",null,Object(i.b)("li",{parentName:"ul"},"Parameters:",Object(i.b)("ul",{parentName:"li"},Object(i.b)("li",{parentName:"ul"},"adapter: Model adapter whose corresponding record zone should be deleted"),Object(i.b)("li",{parentName:"ul"},"completion: Completion block.")))),Object(i.b)("h4",{id:"parameters-2"},"Parameters"),Object(i.b)("table",null,Object(i.b)("thead",{parentName:"table"},Object(i.b)("tr",{parentName:"thead"},Object(i.b)("th",{parentName:"tr",align:null},"Name"),Object(i.b)("th",{parentName:"tr",align:null},"Description"))),Object(i.b)("tbody",{parentName:"table"},Object(i.b)("tr",{parentName:"tbody"},Object(i.b)("td",{parentName:"tr",align:null},"adapter"),Object(i.b)("td",{parentName:"tr",align:null},"Model adapter whose corresponding record zone should be deleted")),Object(i.b)("tr",{parentName:"tbody"},Object(i.b)("td",{parentName:"tr",align:null},"completion"),Object(i.b)("td",{parentName:"tr",align:null},"Completion block.")))),Object(i.b)("h3",{id:"addmodeladapter_"},Object(i.b)("inlineCode",{parentName:"h3"},"addModelAdapter(_:)")),Object(i.b)("pre",null,Object(i.b)("code",{parentName:"pre",className:"language-swift"},"@objc public func addModelAdapter(_ adapter: ModelAdapter)\n")),Object(i.b)("p",null,"Adds a new model adapter to be synchronized with CloudKit."),Object(i.b)("ul",null,Object(i.b)("li",{parentName:"ul"},"Parameter adapter: The adapter to be managed by this synchronizer.")),Object(i.b)("h4",{id:"parameters-3"},"Parameters"),Object(i.b)("table",null,Object(i.b)("thead",{parentName:"table"},Object(i.b)("tr",{parentName:"thead"},Object(i.b)("th",{parentName:"tr",align:null},"Name"),Object(i.b)("th",{parentName:"tr",align:null},"Description"))),Object(i.b)("tbody",{parentName:"table"},Object(i.b)("tr",{parentName:"tbody"},Object(i.b)("td",{parentName:"tr",align:null},"adapter"),Object(i.b)("td",{parentName:"tr",align:null},"The adapter to be managed by this synchronizer.")))),Object(i.b)("h3",{id:"removemodeladapter_"},Object(i.b)("inlineCode",{parentName:"h3"},"removeModelAdapter(_:)")),Object(i.b)("pre",null,Object(i.b)("code",{parentName:"pre",className:"language-swift"},"@objc  public func removeModelAdapter(_ adapter: ModelAdapter)\n")),Object(i.b)("p",null,"Removes the model adapter so data managed by it won't be synced with CloudKit any more."),Object(i.b)("ul",null,Object(i.b)("li",{parentName:"ul"},"Parameter adapter: Adapter to be removed from the synchronizer")),Object(i.b)("h4",{id:"parameters-4"},"Parameters"),Object(i.b)("table",null,Object(i.b)("thead",{parentName:"table"},Object(i.b)("tr",{parentName:"thead"},Object(i.b)("th",{parentName:"tr",align:null},"Name"),Object(i.b)("th",{parentName:"tr",align:null},"Description"))),Object(i.b)("tbody",{parentName:"table"},Object(i.b)("tr",{parentName:"tbody"},Object(i.b)("td",{parentName:"tr",align:null},"adapter"),Object(i.b)("td",{parentName:"tr",align:null},"Adapter to be removed from the synchronizer")))),Object(i.b)("h2",{id:"notifications"},"Notifications"),Object(i.b)("pre",null,Object(i.b)("code",{parentName:"pre",className:"language-swift"},'public extension Notification.Name {\n    \n    /// Sent when the synchronizer is going to start a sync with CloudKit.\n    static let SynchronizerWillSynchronize = Notification.Name("QSCloudKitSynchronizerWillSynchronizeNotification")\n    /// Sent when the synchronizer is going to start the fetch stage, where it downloads any new changes from CloudKit.\n    static let SynchronizerWillFetchChanges = Notification.Name("QSCloudKitSynchronizerWillFetchChangesNotification")\n    /// Sent when the synchronizer is going to start the upload stage, where it sends changes to CloudKit.\n    static let SynchronizerWillUploadChanges = Notification.Name("QSCloudKitSynchronizerWillUploadChangesNotification")\n    /// Sent when the synchronizer finishes syncing.\n    static let SynchronizerDidSynchronize = Notification.Name("QSCloudKitSynchronizerDidSynchronizeNotification")\n    /// Sent when the synchronizer encounters an error while syncing.\n    static let SynchronizerDidFailToSynchronize = Notification.Name("QSCloudKitSynchronizerDidFailToSynchronizeNotification")\n}\n')))}d.isMDXComponent=!0},132:function(e,t,n){"use strict";n.d(t,"a",(function(){return p})),n.d(t,"b",(function(){return h}));var a=n(0),r=n.n(a);function i(e,t,n){return t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}function o(e,t){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var a=Object.getOwnPropertySymbols(e);t&&(a=a.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),n.push.apply(n,a)}return n}function l(e){for(var t=1;t<arguments.length;t++){var n=null!=arguments[t]?arguments[t]:{};t%2?o(Object(n),!0).forEach((function(t){i(e,t,n[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):o(Object(n)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(n,t))}))}return e}function c(e,t){if(null==e)return{};var n,a,r=function(e,t){if(null==e)return{};var n,a,r={},i=Object.keys(e);for(a=0;a<i.length;a++)n=i[a],t.indexOf(n)>=0||(r[n]=e[n]);return r}(e,t);if(Object.getOwnPropertySymbols){var i=Object.getOwnPropertySymbols(e);for(a=0;a<i.length;a++)n=i[a],t.indexOf(n)>=0||Object.prototype.propertyIsEnumerable.call(e,n)&&(r[n]=e[n])}return r}var b=r.a.createContext({}),d=function(e){var t=r.a.useContext(b),n=t;return e&&(n="function"==typeof e?e(t):l(l({},t),e)),n},p=function(e){var t=d(e.components);return r.a.createElement(b.Provider,{value:t},e.children)},s={inlineCode:"code",wrapper:function(e){var t=e.children;return r.a.createElement(r.a.Fragment,{},t)}},u=r.a.forwardRef((function(e,t){var n=e.components,a=e.mdxType,i=e.originalType,o=e.parentName,b=c(e,["components","mdxType","originalType","parentName"]),p=d(n),u=a,h=p["".concat(o,".").concat(u)]||p[u]||s[u]||i;return n?r.a.createElement(h,l(l({ref:t},b),{},{components:n})):r.a.createElement(h,l({ref:t},b))}));function h(e,t){var n=arguments,a=t&&t.mdxType;if("string"==typeof e||a){var i=n.length,o=new Array(i);o[0]=u;var l={};for(var c in t)hasOwnProperty.call(t,c)&&(l[c]=t[c]);l.originalType=e,l.mdxType="string"==typeof e?e:a,o[1]=l;for(var b=2;b<i;b++)o[b]=n[b];return r.a.createElement.apply(null,o)}return r.a.createElement.apply(null,n)}u.displayName="MDXCreateElement"}}]);