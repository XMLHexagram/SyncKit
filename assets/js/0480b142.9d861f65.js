(window.webpackJsonp=window.webpackJsonp||[]).push([[3],{132:function(e,n,t){"use strict";t.d(n,"a",(function(){return u})),t.d(n,"b",(function(){return f}));var r=t(0),o=t.n(r);function a(e,n,t){return n in e?Object.defineProperty(e,n,{value:t,enumerable:!0,configurable:!0,writable:!0}):e[n]=t,e}function i(e,n){var t=Object.keys(e);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(e);n&&(r=r.filter((function(n){return Object.getOwnPropertyDescriptor(e,n).enumerable}))),t.push.apply(t,r)}return t}function c(e){for(var n=1;n<arguments.length;n++){var t=null!=arguments[n]?arguments[n]:{};n%2?i(Object(t),!0).forEach((function(n){a(e,n,t[n])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(t)):i(Object(t)).forEach((function(n){Object.defineProperty(e,n,Object.getOwnPropertyDescriptor(t,n))}))}return e}function l(e,n){if(null==e)return{};var t,r,o=function(e,n){if(null==e)return{};var t,r,o={},a=Object.keys(e);for(r=0;r<a.length;r++)t=a[r],n.indexOf(t)>=0||(o[t]=e[t]);return o}(e,n);if(Object.getOwnPropertySymbols){var a=Object.getOwnPropertySymbols(e);for(r=0;r<a.length;r++)t=a[r],n.indexOf(t)>=0||Object.prototype.propertyIsEnumerable.call(e,t)&&(o[t]=e[t])}return o}var p=o.a.createContext({}),s=function(e){var n=o.a.useContext(p),t=n;return e&&(t="function"==typeof e?e(n):c(c({},n),e)),t},u=function(e){var n=s(e.components);return o.a.createElement(p.Provider,{value:n},e.children)},d={inlineCode:"code",wrapper:function(e){var n=e.children;return o.a.createElement(o.a.Fragment,{},n)}},b=o.a.forwardRef((function(e,n){var t=e.components,r=e.mdxType,a=e.originalType,i=e.parentName,p=l(e,["components","mdxType","originalType","parentName"]),u=s(t),b=r,f=u["".concat(i,".").concat(b)]||u[b]||d[b]||a;return t?o.a.createElement(f,c(c({ref:n},p),{},{components:t})):o.a.createElement(f,c({ref:n},p))}));function f(e,n){var t=arguments,r=n&&n.mdxType;if("string"==typeof e||r){var a=t.length,i=new Array(a);i[0]=b;var c={};for(var l in n)hasOwnProperty.call(n,l)&&(c[l]=n[l]);c.originalType=e,c.mdxType="string"==typeof e?e:r,i[1]=c;for(var p=2;p<a;p++)i[p]=t[p];return o.a.createElement.apply(null,i)}return o.a.createElement.apply(null,t)}b.displayName="MDXCreateElement"},65:function(e,n,t){"use strict";t.r(n),t.d(n,"frontMatter",(function(){return i})),t.d(n,"metadata",(function(){return c})),t.d(n,"toc",(function(){return l})),t.d(n,"default",(function(){return s}));var r=t(3),o=t(7),a=(t(0),t(132)),i={id:"faq",title:"FAQ"},c={unversionedId:"faq",id:"faq",isDocsHomePage:!1,title:"FAQ",description:"- How do I get the library to synchronize automatically when my model gets saved?",source:"@site/docs/faq.md",slug:"/faq",permalink:"/SyncKit/faq",editUrl:"https://github.com/facebook/docusaurus/edit/master/website/docs/faq.md",version:"current",sidebar:"docs",previous:{title:"Architecture",permalink:"/SyncKit/architecture"}},l=[],p={toc:l};function s(e){var n=e.components,t=Object(o.a)(e,["components"]);return Object(a.b)("wrapper",Object(r.a)({},p,t,{components:n,mdxType:"MDXLayout"}),Object(a.b)("ul",null,Object(a.b)("li",{parentName:"ul"},"How do I get the library to synchronize automatically when my model gets saved?")),Object(a.b)("p",null,"You could call ",Object(a.b)("inlineCode",{parentName:"p"},"synchronizer.synchronize()")," right after you save your model. Alternatively, there is a ",Object(a.b)("inlineCode",{parentName:"p"},"ModelAdapterHasChangesNotification")," notification being posted when model changes are detected, so you could listen for that and trigger synchronization in response."),Object(a.b)("ul",null,Object(a.b)("li",{parentName:"ul"},"How do I detect when changes happen on another device?")),Object(a.b)("p",null,"SyncKit can create a ",Object(a.b)("inlineCode",{parentName:"p"},"CKSubscription")," for a given record zone so your device will receive a push notification whenever there are new changes in that record zone."),Object(a.b)("pre",null,Object(a.b)("code",{parentName:"pre",className:"language-swift"},"\nif let zoneID = synchronizer.modelAdapters.first?.recordZoneID {\n    synchronizer.subscribeForChanges(in: zoneID) { error in\n        ...\n    }\n}\n")),Object(a.b)("p",null,"Your app will also need to implement this and call ",Object(a.b)("inlineCode",{parentName:"p"},"synchronize")," in response."),Object(a.b)("pre",null,Object(a.b)("code",{parentName:"pre",className:"language-swift"},"optional func application(_ application: UIApplication, didReceiveRemoteNotification userInfo: [AnyHashable : Any], fetchCompletionHandler completionHandler: @escaping (UIBackgroundFetchResult) -> Void)\n")),Object(a.b)("p",null,"Note that subscriptions are only possible in the private database."))}s.isMDXComponent=!0}}]);