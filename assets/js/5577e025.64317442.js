(self.webpackChunkdocs_synckit=self.webpackChunkdocs_synckit||[]).push([[6485],{3905:function(e,t,r){"use strict";r.d(t,{Zo:function(){return p},kt:function(){return m}});var a=r(7294);function n(e,t,r){return t in e?Object.defineProperty(e,t,{value:r,enumerable:!0,configurable:!0,writable:!0}):e[t]=r,e}function i(e,t){var r=Object.keys(e);if(Object.getOwnPropertySymbols){var a=Object.getOwnPropertySymbols(e);t&&(a=a.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),r.push.apply(r,a)}return r}function o(e){for(var t=1;t<arguments.length;t++){var r=null!=arguments[t]?arguments[t]:{};t%2?i(Object(r),!0).forEach((function(t){n(e,t,r[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(r)):i(Object(r)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(r,t))}))}return e}function d(e,t){if(null==e)return{};var r,a,n=function(e,t){if(null==e)return{};var r,a,n={},i=Object.keys(e);for(a=0;a<i.length;a++)r=i[a],t.indexOf(r)>=0||(n[r]=e[r]);return n}(e,t);if(Object.getOwnPropertySymbols){var i=Object.getOwnPropertySymbols(e);for(a=0;a<i.length;a++)r=i[a],t.indexOf(r)>=0||Object.prototype.propertyIsEnumerable.call(e,r)&&(n[r]=e[r])}return n}var c=a.createContext({}),l=function(e){var t=a.useContext(c),r=t;return e&&(r="function"==typeof e?e(t):o(o({},t),e)),r},p=function(e){var t=l(e.components);return a.createElement(c.Provider,{value:t},e.children)},u={inlineCode:"code",wrapper:function(e){var t=e.children;return a.createElement(a.Fragment,{},t)}},s=a.forwardRef((function(e,t){var r=e.components,n=e.mdxType,i=e.originalType,c=e.parentName,p=d(e,["components","mdxType","originalType","parentName"]),s=l(r),m=n,f=s["".concat(c,".").concat(m)]||s[m]||u[m]||i;return r?a.createElement(f,o(o({ref:t},p),{},{components:r})):a.createElement(f,o({ref:t},p))}));function m(e,t){var r=arguments,n=t&&t.mdxType;if("string"==typeof e||n){var i=r.length,o=new Array(i);o[0]=s;var d={};for(var c in t)hasOwnProperty.call(t,c)&&(d[c]=t[c]);d.originalType=e,d.mdxType="string"==typeof e?e:n,o[1]=d;for(var l=2;l<i;l++)o[l]=r[l];return a.createElement.apply(null,o)}return a.createElement.apply(null,r)}s.displayName="MDXCreateElement"},5037:function(e,t,r){"use strict";r.r(t),r.d(t,{frontMatter:function(){return d},contentTitle:function(){return c},metadata:function(){return l},toc:function(){return p},default:function(){return s}});var a=r(2122),n=r(9756),i=(r(7294),r(3905)),o=["components"],d={},c="DefaultCoreDataStackProvider",l={unversionedId:"api/coredata/DefaultCoreDataStackProvider",id:"api/coredata/DefaultCoreDataStackProvider",isDocsHomePage:!1,title:"DefaultCoreDataStackProvider",description:"Can create new Core Data stacks, corresponding to CloudKit record zones. Used by CloudKitSynchronizer to dynamically create stacks when new record zones are added to this user's database \u2013e.g. if the user accepts a share.",source:"@site/docs/api/coredata/DefaultCoreDataStackProvider.md",sourceDirName:"api/coredata",slug:"/api/coredata/DefaultCoreDataStackProvider",permalink:"/SyncKit/api/coredata/DefaultCoreDataStackProvider",version:"current",frontMatter:{},sidebar:"API",previous:{title:"DefaultCoreDataAdapterProvider",permalink:"/SyncKit/api/coredata/DefaultCoreDataAdapterProvider"},next:{title:"DefaultRealmAdapterProvider",permalink:"/SyncKit/api/realm/DefaultRealmAdapterProvider"}},p=[{value:"Inheritance",id:"inheritance",children:[]},{value:"Initializers",id:"initializers",children:[{value:"<code>init(identifier:storeType:model:appGroup:)</code>",id:"initidentifierstoretypemodelappgroup",children:[]}]},{value:"Properties",id:"properties",children:[{value:"<code>identifier</code>",id:"identifier",children:[]},{value:"<code>storeType</code>",id:"storetype",children:[]},{value:"<code>model</code>",id:"model",children:[]},{value:"<code>appGroup</code>",id:"appgroup",children:[]},{value:"<code>adapterDictionary</code>",id:"adapterdictionary",children:[]},{value:"<code>coreDataStacks</code>",id:"coredatastacks",children:[]},{value:"<code>directoryURL</code>",id:"directoryurl",children:[]}]},{value:"Methods",id:"methods",children:[{value:"<code>cloudKitSynchronizer(_:modelAdapterForRecordZoneID:)</code>",id:"cloudkitsynchronizer_modeladapterforrecordzoneid",children:[]},{value:"<code>cloudKitSynchronizer(_:zoneWasDeletedWithZoneID:)</code>",id:"cloudkitsynchronizer_zonewasdeletedwithzoneid",children:[]}]}],u={toc:p};function s(e){var t=e.components,r=(0,n.Z)(e,o);return(0,i.kt)("wrapper",(0,a.Z)({},u,r,{components:t,mdxType:"MDXLayout"}),(0,i.kt)("h1",{id:"defaultcoredatastackprovider"},"DefaultCoreDataStackProvider"),(0,i.kt)("p",null,"Can create new Core Data stacks, corresponding to CloudKit record zones. Used by ",(0,i.kt)("inlineCode",{parentName:"p"},"CloudKitSynchronizer")," to dynamically create stacks when new record zones are added to this user's database \u2013e.g. if the user accepts a share."),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-swift"},"@objc public class DefaultCoreDataStackProvider: NSObject \n")),(0,i.kt)("h2",{id:"inheritance"},"Inheritance"),(0,i.kt)("p",null,(0,i.kt)("a",{parentName:"p",href:"../core/AdapterProvider"},(0,i.kt)("inlineCode",{parentName:"a"},"AdapterProvider")),", ",(0,i.kt)("inlineCode",{parentName:"p"},"NSObject")),(0,i.kt)("h2",{id:"initializers"},"Initializers"),(0,i.kt)("h3",{id:"initidentifierstoretypemodelappgroup"},(0,i.kt)("inlineCode",{parentName:"h3"},"init(identifier:storeType:model:appGroup:)")),(0,i.kt)("p",null,"Create a new Core Data stack provider"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-swift"},"@objc public init(identifier: String, storeType: String, model: NSManagedObjectModel, appGroup: String? = nil) \n")),(0,i.kt)("h4",{id:"parameters"},"Parameters"),(0,i.kt)("ul",null,(0,i.kt)("li",{parentName:"ul"},"identifier: Identifier for this provider. Once created, an identifier must remain the same for a given provider"),(0,i.kt)("li",{parentName:"ul"},"storeType: Core Data store type."),(0,i.kt)("li",{parentName:"ul"},"model: Core Data model."),(0,i.kt)("li",{parentName:"ul"},"appGroup: Optional app group identifier.")),(0,i.kt)("h2",{id:"properties"},"Properties"),(0,i.kt)("h3",{id:"identifier"},(0,i.kt)("inlineCode",{parentName:"h3"},"identifier")),(0,i.kt)("p",null,"This provider's identifier."),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-swift"},"@objc public let identifier: String\n")),(0,i.kt)("h3",{id:"storetype"},(0,i.kt)("inlineCode",{parentName:"h3"},"storeType")),(0,i.kt)("p",null,"Core Data store type."),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-swift"},"@objc public let storeType: String\n")),(0,i.kt)("h3",{id:"model"},(0,i.kt)("inlineCode",{parentName:"h3"},"model")),(0,i.kt)("p",null,"Core Data model."),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-swift"},"@objc public let model: NSManagedObjectModel\n")),(0,i.kt)("h3",{id:"appgroup"},(0,i.kt)("inlineCode",{parentName:"h3"},"appGroup")),(0,i.kt)("p",null,"App group, if any."),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-swift"},"@objc public let appGroup: String?\n")),(0,i.kt)("h3",{id:"adapterdictionary"},(0,i.kt)("inlineCode",{parentName:"h3"},"adapterDictionary")),(0,i.kt)("p",null,"Current list of adapters maintained by this adapter provider."),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-swift"},"@objc public private(set) var adapterDictionary: [CKRecordZone.ID: CoreDataAdapter]\n")),(0,i.kt)("h3",{id:"coredatastacks"},(0,i.kt)("inlineCode",{parentName:"h3"},"coreDataStacks")),(0,i.kt)("p",null,"Current list of Core Data stacks maintained by this adapter provider."),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-swift"},"@objc public private(set) var coreDataStacks: [CKRecordZone.ID: CoreDataStack]\n")),(0,i.kt)("h3",{id:"directoryurl"},(0,i.kt)("inlineCode",{parentName:"h3"},"directoryURL")),(0,i.kt)("p",null,"URL of the folder where data by this provider is saved."),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-swift"},"@objc public private(set) var directoryURL: URL!\n")),(0,i.kt)("h2",{id:"methods"},"Methods"),(0,i.kt)("h3",{id:"cloudkitsynchronizer_modeladapterforrecordzoneid"},(0,i.kt)("inlineCode",{parentName:"h3"},"cloudKitSynchronizer(_:modelAdapterForRecordZoneID:)")),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-swift"},"public func cloudKitSynchronizer(_ synchronizer: CloudKitSynchronizer, modelAdapterForRecordZoneID zoneID: CKRecordZone.ID) -> ModelAdapter? \n")),(0,i.kt)("h3",{id:"cloudkitsynchronizer_zonewasdeletedwithzoneid"},(0,i.kt)("inlineCode",{parentName:"h3"},"cloudKitSynchronizer(_:zoneWasDeletedWithZoneID:)")),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-swift"},"public func cloudKitSynchronizer(_ synchronizer: CloudKitSynchronizer, zoneWasDeletedWithZoneID zoneID: CKRecordZone.ID) \n")))}s.isMDXComponent=!0}}]);