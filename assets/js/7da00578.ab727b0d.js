(self.webpackChunkdocs_synckit=self.webpackChunkdocs_synckit||[]).push([[2329],{3905:function(e,n,t){"use strict";t.d(n,{Zo:function(){return s},kt:function(){return f}});var r=t(7294);function o(e,n,t){return n in e?Object.defineProperty(e,n,{value:t,enumerable:!0,configurable:!0,writable:!0}):e[n]=t,e}function i(e,n){var t=Object.keys(e);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(e);n&&(r=r.filter((function(n){return Object.getOwnPropertyDescriptor(e,n).enumerable}))),t.push.apply(t,r)}return t}function a(e){for(var n=1;n<arguments.length;n++){var t=null!=arguments[n]?arguments[n]:{};n%2?i(Object(t),!0).forEach((function(n){o(e,n,t[n])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(t)):i(Object(t)).forEach((function(n){Object.defineProperty(e,n,Object.getOwnPropertyDescriptor(t,n))}))}return e}function c(e,n){if(null==e)return{};var t,r,o=function(e,n){if(null==e)return{};var t,r,o={},i=Object.keys(e);for(r=0;r<i.length;r++)t=i[r],n.indexOf(t)>=0||(o[t]=e[t]);return o}(e,n);if(Object.getOwnPropertySymbols){var i=Object.getOwnPropertySymbols(e);for(r=0;r<i.length;r++)t=i[r],n.indexOf(t)>=0||Object.prototype.propertyIsEnumerable.call(e,t)&&(o[t]=e[t])}return o}var l=r.createContext({}),u=function(e){var n=r.useContext(l),t=n;return e&&(t="function"==typeof e?e(n):a(a({},n),e)),t},s=function(e){var n=u(e.components);return r.createElement(l.Provider,{value:n},e.children)},m={inlineCode:"code",wrapper:function(e){var n=e.children;return r.createElement(r.Fragment,{},n)}},p=r.forwardRef((function(e,n){var t=e.components,o=e.mdxType,i=e.originalType,l=e.parentName,s=c(e,["components","mdxType","originalType","parentName"]),p=u(t),f=o,y=p["".concat(l,".").concat(f)]||p[f]||m[f]||i;return t?r.createElement(y,a(a({ref:n},s),{},{components:t})):r.createElement(y,a({ref:n},s))}));function f(e,n){var t=arguments,o=n&&n.mdxType;if("string"==typeof e||o){var i=t.length,a=new Array(i);a[0]=p;var c={};for(var l in n)hasOwnProperty.call(n,l)&&(c[l]=n[l]);c.originalType=e,c.mdxType="string"==typeof e?e:o,a[1]=c;for(var u=2;u<i;u++)a[u]=t[u];return r.createElement.apply(null,a)}return r.createElement.apply(null,t)}p.displayName="MDXCreateElement"},1675:function(e,n,t){"use strict";t.r(n),t.d(n,{frontMatter:function(){return c},contentTitle:function(){return l},metadata:function(){return u},toc:function(){return s},default:function(){return p}});var r=t(2122),o=t(9756),i=(t(7294),t(3905)),a=["components"],c={id:"realm",title:"SyncKit for Realm"},l="SyncKit for Realm",u={unversionedId:"realm",id:"realm",isDocsHomePage:!1,title:"SyncKit for Realm",description:"Requirements",source:"@site/docs/realm.md",sourceDirName:".",slug:"/realm",permalink:"/realm",version:"current",frontMatter:{id:"realm",title:"SyncKit for Realm"},sidebar:"docs",previous:{title:"Migrating from SyncKit 0.3.0",permalink:"/migrating"},next:{title:"Configuration",permalink:"/configuration"}},s=[{value:"Requirements",id:"requirements",children:[]},{value:"How to use",id:"how-to-use",children:[]},{value:"Limitations",id:"limitations",children:[]}],m={toc:s};function p(e){var n=e.components,t=(0,o.Z)(e,a);return(0,i.kt)("wrapper",(0,r.Z)({},m,t,{components:n,mdxType:"MDXLayout"}),(0,i.kt)("h1",{id:"synckit-for-realm"},"SyncKit for Realm"),(0,i.kt)("h2",{id:"requirements"},"Requirements"),(0,i.kt)("p",null,"Your model classes must have a primary key."),(0,i.kt)("h2",{id:"how-to-use"},"How to use"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-swift"},'import SyncKit\n\nsynchronizer = CloudKitSynchronizer.privateSynchronizer(containerName: "your-container-name", configuration: realmConfiguration)\n\n...\n\n// Synchronize\nsynchronizer.synchronize { error in\n            ...\n}\n')),(0,i.kt)("p",null,"In its Realm version SyncKit uses a Realm model internally to keep track of changes in your model. Depending on how you integrate SyncKit with your project you might want to specify the classes that your Realm manages to avoid it from picking up internal classes from SyncKit:"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-swift"},"let configuration = RLMRealmConfiguration()\nconfiguration.objectClasses = [MyClass1.self, MyClass2.self, ...]\nlet realm = try! RLMRealm(configuration: configuration)\n")),(0,i.kt)("h2",{id:"limitations"},"Limitations"),(0,i.kt)("p",null,"CloudKit doesn't support ordered relations or many-to-many relationships, so SyncKit will ignore your RLMArray/Array properties. It is recommended to model your many-to-one relationships using RLMLinkingObjects/LinkingObjects and Object properties."))}p.isMDXComponent=!0}}]);