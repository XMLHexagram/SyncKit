(window.webpackJsonp=window.webpackJsonp||[]).push([[28],{132:function(e,t,r){"use strict";r.d(t,"a",(function(){return b})),r.d(t,"b",(function(){return m}));var a=r(0),n=r.n(a);function i(e,t,r){return t in e?Object.defineProperty(e,t,{value:r,enumerable:!0,configurable:!0,writable:!0}):e[t]=r,e}function o(e,t){var r=Object.keys(e);if(Object.getOwnPropertySymbols){var a=Object.getOwnPropertySymbols(e);t&&(a=a.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),r.push.apply(r,a)}return r}function c(e){for(var t=1;t<arguments.length;t++){var r=null!=arguments[t]?arguments[t]:{};t%2?o(Object(r),!0).forEach((function(t){i(e,t,r[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(r)):o(Object(r)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(r,t))}))}return e}function l(e,t){if(null==e)return{};var r,a,n=function(e,t){if(null==e)return{};var r,a,n={},i=Object.keys(e);for(a=0;a<i.length;a++)r=i[a],t.indexOf(r)>=0||(n[r]=e[r]);return n}(e,t);if(Object.getOwnPropertySymbols){var i=Object.getOwnPropertySymbols(e);for(a=0;a<i.length;a++)r=i[a],t.indexOf(r)>=0||Object.prototype.propertyIsEnumerable.call(e,r)&&(n[r]=e[r])}return n}var p=n.a.createContext({}),d=function(e){var t=n.a.useContext(p),r=t;return e&&(r="function"==typeof e?e(t):c(c({},t),e)),r},b=function(e){var t=d(e.components);return n.a.createElement(p.Provider,{value:t},e.children)},s={inlineCode:"code",wrapper:function(e){var t=e.children;return n.a.createElement(n.a.Fragment,{},t)}},u=n.a.forwardRef((function(e,t){var r=e.components,a=e.mdxType,i=e.originalType,o=e.parentName,p=l(e,["components","mdxType","originalType","parentName"]),b=d(r),u=a,m=b["".concat(o,".").concat(u)]||b[u]||s[u]||i;return r?n.a.createElement(m,c(c({ref:t},p),{},{components:r})):n.a.createElement(m,c({ref:t},p))}));function m(e,t){var r=arguments,a=t&&t.mdxType;if("string"==typeof e||a){var i=r.length,o=new Array(i);o[0]=u;var c={};for(var l in t)hasOwnProperty.call(t,l)&&(c[l]=t[l]);c.originalType=e,c.mdxType="string"==typeof e?e:a,o[1]=c;for(var p=2;p<i;p++)o[p]=r[p];return n.a.createElement.apply(null,o)}return n.a.createElement.apply(null,r)}u.displayName="MDXCreateElement"},98:function(e,t,r){"use strict";r.r(t),r.d(t,"frontMatter",(function(){return o})),r.d(t,"metadata",(function(){return c})),r.d(t,"toc",(function(){return l})),r.d(t,"default",(function(){return d}));var a=r(3),n=r(7),i=(r(0),r(132)),o={},c={unversionedId:"CoreDataAPI/classes/DefaultCoreDataStackProvider",id:"CoreDataAPI/classes/DefaultCoreDataStackProvider",isDocsHomePage:!1,title:"DefaultCoreDataStackProvider",description:"CLASS",source:"@site/docs/CoreDataAPI/classes/DefaultCoreDataStackProvider.md",slug:"/CoreDataAPI/classes/DefaultCoreDataStackProvider",permalink:"/SyncKit/CoreDataAPI/classes/DefaultCoreDataStackProvider",editUrl:"https://github.com/facebook/docusaurus/edit/master/website/docs/CoreDataAPI/classes/DefaultCoreDataStackProvider.md",version:"current",sidebar:"api",previous:{title:"DefaultCoreDataAdapterDelegate",permalink:"/SyncKit/CoreDataAPI/classes/DefaultCoreDataAdapterDelegate"},next:{title:"CoreDataAdapterConflictResolutionDelegate",permalink:"/SyncKit/CoreDataAPI/protocols/CoreDataAdapterConflictResolutionDelegate"}},l=[{value:"Properties",id:"properties",children:[{value:"<code>identifier</code>",id:"identifier",children:[]},{value:"<code>storeType</code>",id:"storetype",children:[]},{value:"<code>model</code>",id:"model",children:[]},{value:"<code>appGroup</code>",id:"appgroup",children:[]},{value:"<code>adapterDictionary</code>",id:"adapterdictionary",children:[]},{value:"<code>coreDataStacks</code>",id:"coredatastacks",children:[]},{value:"<code>directoryURL</code>",id:"directoryurl",children:[]}]},{value:"Methods",id:"methods",children:[{value:"<code>init(identifier:storeType:model:appGroup:)</code>",id:"initidentifierstoretypemodelappgroup",children:[]}]}],p={toc:l};function d(e){var t=e.components,r=Object(n.a)(e,["components"]);return Object(i.b)("wrapper",Object(a.a)({},p,r,{components:t,mdxType:"MDXLayout"}),Object(i.b)("p",null,Object(i.b)("strong",{parentName:"p"},"CLASS")),Object(i.b)("h1",{id:"defaultcoredatastackprovider"},Object(i.b)("inlineCode",{parentName:"h1"},"DefaultCoreDataStackProvider")),Object(i.b)("pre",null,Object(i.b)("code",{parentName:"pre",className:"language-swift"},"@objc public class DefaultCoreDataStackProvider: NSObject\n")),Object(i.b)("p",null,"Can create new Core Data stacks, corresponding to CloudKit record zones. Used by ",Object(i.b)("inlineCode",{parentName:"p"},"CloudKitSynchronizer")," to dynamically create stacks when new record zones are added to this user's database \u2013e.g. if the user accepts a share."),Object(i.b)("h2",{id:"properties"},"Properties"),Object(i.b)("h3",{id:"identifier"},Object(i.b)("inlineCode",{parentName:"h3"},"identifier")),Object(i.b)("pre",null,Object(i.b)("code",{parentName:"pre",className:"language-swift"},"@objc public let identifier: String\n")),Object(i.b)("p",null,"This provider's identifier."),Object(i.b)("h3",{id:"storetype"},Object(i.b)("inlineCode",{parentName:"h3"},"storeType")),Object(i.b)("pre",null,Object(i.b)("code",{parentName:"pre",className:"language-swift"},"@objc public let storeType: String\n")),Object(i.b)("p",null,"Core Data store type."),Object(i.b)("h3",{id:"model"},Object(i.b)("inlineCode",{parentName:"h3"},"model")),Object(i.b)("pre",null,Object(i.b)("code",{parentName:"pre",className:"language-swift"},"@objc public let model: NSManagedObjectModel\n")),Object(i.b)("p",null,"Core Data model."),Object(i.b)("h3",{id:"appgroup"},Object(i.b)("inlineCode",{parentName:"h3"},"appGroup")),Object(i.b)("pre",null,Object(i.b)("code",{parentName:"pre",className:"language-swift"},"@objc public let appGroup: String?\n")),Object(i.b)("p",null,"App group, if any."),Object(i.b)("h3",{id:"adapterdictionary"},Object(i.b)("inlineCode",{parentName:"h3"},"adapterDictionary")),Object(i.b)("pre",null,Object(i.b)("code",{parentName:"pre",className:"language-swift"},"@objc public private(set) var adapterDictionary: [CKRecordZone.ID: CoreDataAdapter]\n")),Object(i.b)("p",null,"Current list of adapters maintained by this adapter provider."),Object(i.b)("h3",{id:"coredatastacks"},Object(i.b)("inlineCode",{parentName:"h3"},"coreDataStacks")),Object(i.b)("pre",null,Object(i.b)("code",{parentName:"pre",className:"language-swift"},"@objc public private(set) var coreDataStacks: [CKRecordZone.ID: CoreDataStack]\n")),Object(i.b)("p",null,"Current list of Core Data stacks maintained by this adapter provider."),Object(i.b)("h3",{id:"directoryurl"},Object(i.b)("inlineCode",{parentName:"h3"},"directoryURL")),Object(i.b)("pre",null,Object(i.b)("code",{parentName:"pre",className:"language-swift"},"@objc public private(set) var directoryURL: URL!\n")),Object(i.b)("p",null,"URL of the folder where data by this provider is saved."),Object(i.b)("h2",{id:"methods"},"Methods"),Object(i.b)("h3",{id:"initidentifierstoretypemodelappgroup"},Object(i.b)("inlineCode",{parentName:"h3"},"init(identifier:storeType:model:appGroup:)")),Object(i.b)("pre",null,Object(i.b)("code",{parentName:"pre",className:"language-swift"},"@objc public init(identifier: String, storeType: String, model: NSManagedObjectModel, appGroup: String? = nil)\n")),Object(i.b)("p",null,"Create a new Core Data stack provider"),Object(i.b)("ul",null,Object(i.b)("li",{parentName:"ul"},"Parameters:",Object(i.b)("ul",{parentName:"li"},Object(i.b)("li",{parentName:"ul"},"identifier: Identifier for this provider. Once created, an identifier must remain the same for a given provider"),Object(i.b)("li",{parentName:"ul"},"storeType: Core Data store type."),Object(i.b)("li",{parentName:"ul"},"model: Core Data model."),Object(i.b)("li",{parentName:"ul"},"appGroup: Optional app group identifier.")))),Object(i.b)("h4",{id:"parameters"},"Parameters"),Object(i.b)("table",null,Object(i.b)("thead",{parentName:"table"},Object(i.b)("tr",{parentName:"thead"},Object(i.b)("th",{parentName:"tr",align:null},"Name"),Object(i.b)("th",{parentName:"tr",align:null},"Description"))),Object(i.b)("tbody",{parentName:"table"},Object(i.b)("tr",{parentName:"tbody"},Object(i.b)("td",{parentName:"tr",align:null},"identifier"),Object(i.b)("td",{parentName:"tr",align:null},"Identifier for this provider. Once created, an identifier must remain the same for a given provider")),Object(i.b)("tr",{parentName:"tbody"},Object(i.b)("td",{parentName:"tr",align:null},"storeType"),Object(i.b)("td",{parentName:"tr",align:null},"Core Data store type.")),Object(i.b)("tr",{parentName:"tbody"},Object(i.b)("td",{parentName:"tr",align:null},"model"),Object(i.b)("td",{parentName:"tr",align:null},"Core Data model.")),Object(i.b)("tr",{parentName:"tbody"},Object(i.b)("td",{parentName:"tr",align:null},"appGroup"),Object(i.b)("td",{parentName:"tr",align:null},"Optional app group identifier.")))))}d.isMDXComponent=!0}}]);