(window.webpackJsonp=window.webpackJsonp||[]).push([[8],{130:function(e,t,r){"use strict";r.d(t,"a",(function(){return p})),r.d(t,"b",(function(){return m}));var n=r(0),o=r.n(n);function l(e,t,r){return t in e?Object.defineProperty(e,t,{value:r,enumerable:!0,configurable:!0,writable:!0}):e[t]=r,e}function a(e,t){var r=Object.keys(e);if(Object.getOwnPropertySymbols){var n=Object.getOwnPropertySymbols(e);t&&(n=n.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),r.push.apply(r,n)}return r}function c(e){for(var t=1;t<arguments.length;t++){var r=null!=arguments[t]?arguments[t]:{};t%2?a(Object(r),!0).forEach((function(t){l(e,t,r[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(r)):a(Object(r)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(r,t))}))}return e}function i(e,t){if(null==e)return{};var r,n,o=function(e,t){if(null==e)return{};var r,n,o={},l=Object.keys(e);for(n=0;n<l.length;n++)r=l[n],t.indexOf(r)>=0||(o[r]=e[r]);return o}(e,t);if(Object.getOwnPropertySymbols){var l=Object.getOwnPropertySymbols(e);for(n=0;n<l.length;n++)r=l[n],t.indexOf(r)>=0||Object.prototype.propertyIsEnumerable.call(e,r)&&(o[r]=e[r])}return o}var u=o.a.createContext({}),s=function(e){var t=o.a.useContext(u),r=t;return e&&(r="function"==typeof e?e(t):c(c({},t),e)),r},p=function(e){var t=s(e.components);return o.a.createElement(u.Provider,{value:t},e.children)},d={inlineCode:"code",wrapper:function(e){var t=e.children;return o.a.createElement(o.a.Fragment,{},t)}},b=o.a.forwardRef((function(e,t){var r=e.components,n=e.mdxType,l=e.originalType,a=e.parentName,u=i(e,["components","mdxType","originalType","parentName"]),p=s(r),b=n,m=p["".concat(a,".").concat(b)]||p[b]||d[b]||l;return r?o.a.createElement(m,c(c({ref:t},u),{},{components:r})):o.a.createElement(m,c({ref:t},u))}));function m(e,t){var r=arguments,n=t&&t.mdxType;if("string"==typeof e||n){var l=r.length,a=new Array(l);a[0]=b;var c={};for(var i in t)hasOwnProperty.call(t,i)&&(c[i]=t[i]);c.originalType=e,c.mdxType="string"==typeof e?e:n,a[1]=c;for(var u=2;u<l;u++)a[u]=r[u];return o.a.createElement.apply(null,a)}return o.a.createElement.apply(null,r)}b.displayName="MDXCreateElement"},68:function(e,t,r){"use strict";r.r(t),r.d(t,"frontMatter",(function(){return a})),r.d(t,"metadata",(function(){return c})),r.d(t,"toc",(function(){return i})),r.d(t,"default",(function(){return s}));var n=r(3),o=r(7),l=(r(0),r(130)),a={},c={unversionedId:"CoreDataAPI/protocols/CoreDataMultiFetchedResultsControllerDelegate",id:"CoreDataAPI/protocols/CoreDataMultiFetchedResultsControllerDelegate",isDocsHomePage:!1,title:"CoreDataMultiFetchedResultsControllerDelegate",description:"PROTOCOL",source:"@site/docs/CoreDataAPI/protocols/CoreDataMultiFetchedResultsControllerDelegate.md",slug:"/CoreDataAPI/protocols/CoreDataMultiFetchedResultsControllerDelegate",permalink:"/SyncKit/CoreDataAPI/protocols/CoreDataMultiFetchedResultsControllerDelegate",version:"current",sidebar:"api",previous:{title:"CoreDataAdapterDelegate",permalink:"/SyncKit/CoreDataAPI/protocols/CoreDataAdapterDelegate"},next:{title:"CloudKitSynchronizerRealm",permalink:"/SyncKit/RealmAPI/classes/CloudKitSynchronizerRealm"}},i=[{value:"Methods",id:"methods",children:[{value:"<code>multiFetchedResultsControllerDidChangeControllers(_:)</code>",id:"multifetchedresultscontrollerdidchangecontrollers_",children:[]}]}],u={toc:i};function s(e){var t=e.components,r=Object(o.a)(e,["components"]);return Object(l.b)("wrapper",Object(n.a)({},u,r,{components:t,mdxType:"MDXLayout"}),Object(l.b)("p",null,Object(l.b)("strong",{parentName:"p"},"PROTOCOL")),Object(l.b)("h1",{id:"coredatamultifetchedresultscontrollerdelegate"},Object(l.b)("inlineCode",{parentName:"h1"},"CoreDataMultiFetchedResultsControllerDelegate")),Object(l.b)("pre",null,Object(l.b)("code",{parentName:"pre",className:"language-swift"},"@objc public protocol CoreDataMultiFetchedResultsControllerDelegate: NSFetchedResultsControllerDelegate\n")),Object(l.b)("h2",{id:"methods"},"Methods"),Object(l.b)("h3",{id:"multifetchedresultscontrollerdidchangecontrollers_"},Object(l.b)("inlineCode",{parentName:"h3"},"multiFetchedResultsControllerDidChangeControllers(_:)")),Object(l.b)("pre",null,Object(l.b)("code",{parentName:"pre",className:"language-swift"},"func multiFetchedResultsControllerDidChangeControllers(_ controller: CoreDataMultiFetchedResultsController)\n")),Object(l.b)("p",null,"Called by the multi-controller when the list of internal controllers changed. E.g. a model adapter was added or removed, which will happen when a new record zone is shared with this user for example if the user accepts a share."),Object(l.b)("ul",null,Object(l.b)("li",{parentName:"ul"},"Parameter controller: ",Object(l.b)("inlineCode",{parentName:"li"},"CoreDataMultiFetchedResultsController"))),Object(l.b)("h4",{id:"parameters"},"Parameters"),Object(l.b)("table",null,Object(l.b)("thead",{parentName:"table"},Object(l.b)("tr",{parentName:"thead"},Object(l.b)("th",{parentName:"tr",align:null},"Name"),Object(l.b)("th",{parentName:"tr",align:null},"Description"))),Object(l.b)("tbody",{parentName:"table"},Object(l.b)("tr",{parentName:"tbody"},Object(l.b)("td",{parentName:"tr",align:null},"controller"),Object(l.b)("td",{parentName:"tr",align:null},Object(l.b)("inlineCode",{parentName:"td"},"CoreDataMultiFetchedResultsController"))))))}s.isMDXComponent=!0}}]);