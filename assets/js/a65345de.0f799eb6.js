(window.webpackJsonp=window.webpackJsonp||[]).push([[48],{118:function(e,t,n){"use strict";n.r(t),n.d(t,"frontMatter",(function(){return i})),n.d(t,"metadata",(function(){return c})),n.d(t,"toc",(function(){return u})),n.d(t,"default",(function(){return s}));var r=n(3),o=n(7),a=(n(0),n(132)),i={id:"coredata",title:"SyncKit for Core Data"},c={unversionedId:"coredata",id:"coredata",isDocsHomePage:!1,title:"SyncKit for Core Data",description:"Import SyncKit and create a synchronizer:",source:"@site/docs/coreData.md",slug:"/coredata",permalink:"/SyncKit/coredata",editUrl:"https://github.com/facebook/docusaurus/edit/master/website/docs/coreData.md",version:"current",sidebar:"docs",previous:{title:"Example app",permalink:"/SyncKit/example"},next:{title:"Migrating from SyncKit 0.3.0",permalink:"/SyncKit/migration"}},u=[{value:"Identifying objects",id:"identifying-objects",children:[]},{value:"Limitations",id:"limitations",children:[]}],l={toc:u};function s(e){var t=e.components,n=Object(o.a)(e,["components"]);return Object(a.b)("wrapper",Object(r.a)({},l,n,{components:t,mdxType:"MDXLayout"}),Object(a.b)("p",null,"Import SyncKit and create a synchronizer:"),Object(a.b)("pre",null,Object(a.b)("code",{parentName:"pre",className:"language-swift"},'\nimport SyncKit\n\n...\n\nsynchronizer = CloudKitSynchronizer.privateSynchronizer(containerName: "your-iCloud-container-name",\n                                                                     managedObjectContext: self.coreDataStack.managedObjectContext)\n\n...\n\n// Synchronize\nsynchronizer.synchronize { error in\n    ...\n}\n')),Object(a.b)("p",null,"This creates a ",Object(a.b)("inlineCode",{parentName:"p"},"CloudKitSynchronizer")," object configured with a ",Object(a.b)("inlineCode",{parentName:"p"},"CoreDataAdapter")," for your model. The adapter registers changes in your model objects so they can be uploaded next time you synchronize data, and it applies changes from downloaded records to your model."),Object(a.b)("p",null,"By default, the adapter will save changes to your Core Data model for you during synchronization, but custom logic can be provided by assigning a custom ",Object(a.b)("inlineCode",{parentName:"p"},"CoreDataAdapterDelegate"),"."),Object(a.b)("h2",{id:"identifying-objects"},"Identifying objects"),Object(a.b)("p",null,"Your CoreData classes should conform to ",Object(a.b)("inlineCode",{parentName:"p"},"PrimaryKey")," and implement its ",Object(a.b)("inlineCode",{parentName:"p"},"static func primaryKey() -> String")," method to return the name of a stored property that should be used as primary key.\nPrimary keys should have a unique value for each object of the same class, and this value should not change in the lifetime of the object."),Object(a.b)("p",null,"If you were using SyncKit before version 0.3.0 and you would like to adopt primary keys, check the ",Object(a.b)("a",{parentName:"p",href:"https://github.com/mentrena/SyncKit/wiki/Core-Data-migrations"},"migration guide"),"."),Object(a.b)("h2",{id:"limitations"},"Limitations"),Object(a.b)("p",null,"CloudKit doesn't support ordered relations or many-to-many relationships, so those won't work."))}s.isMDXComponent=!0},132:function(e,t,n){"use strict";n.d(t,"a",(function(){return p})),n.d(t,"b",(function(){return y}));var r=n(0),o=n.n(r);function a(e,t,n){return t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}function i(e,t){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(e);t&&(r=r.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),n.push.apply(n,r)}return n}function c(e){for(var t=1;t<arguments.length;t++){var n=null!=arguments[t]?arguments[t]:{};t%2?i(Object(n),!0).forEach((function(t){a(e,t,n[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):i(Object(n)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(n,t))}))}return e}function u(e,t){if(null==e)return{};var n,r,o=function(e,t){if(null==e)return{};var n,r,o={},a=Object.keys(e);for(r=0;r<a.length;r++)n=a[r],t.indexOf(n)>=0||(o[n]=e[n]);return o}(e,t);if(Object.getOwnPropertySymbols){var a=Object.getOwnPropertySymbols(e);for(r=0;r<a.length;r++)n=a[r],t.indexOf(n)>=0||Object.prototype.propertyIsEnumerable.call(e,n)&&(o[n]=e[n])}return o}var l=o.a.createContext({}),s=function(e){var t=o.a.useContext(l),n=t;return e&&(n="function"==typeof e?e(t):c(c({},t),e)),n},p=function(e){var t=s(e.components);return o.a.createElement(l.Provider,{value:t},e.children)},d={inlineCode:"code",wrapper:function(e){var t=e.children;return o.a.createElement(o.a.Fragment,{},t)}},m=o.a.forwardRef((function(e,t){var n=e.components,r=e.mdxType,a=e.originalType,i=e.parentName,l=u(e,["components","mdxType","originalType","parentName"]),p=s(n),m=r,y=p["".concat(i,".").concat(m)]||p[m]||d[m]||a;return n?o.a.createElement(y,c(c({ref:t},l),{},{components:n})):o.a.createElement(y,c({ref:t},l))}));function y(e,t){var n=arguments,r=t&&t.mdxType;if("string"==typeof e||r){var a=n.length,i=new Array(a);i[0]=m;var c={};for(var u in t)hasOwnProperty.call(t,u)&&(c[u]=t[u]);c.originalType=e,c.mdxType="string"==typeof e?e:r,i[1]=c;for(var l=2;l<a;l++)i[l]=n[l];return o.a.createElement.apply(null,i)}return o.a.createElement.apply(null,n)}m.displayName="MDXCreateElement"}}]);