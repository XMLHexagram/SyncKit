(self.webpackChunkdocs_synckit=self.webpackChunkdocs_synckit||[]).push([[1587],{3905:function(e,t,n){"use strict";n.d(t,{Zo:function(){return s},kt:function(){return h}});var a=n(7294);function r(e,t,n){return t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}function i(e,t){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var a=Object.getOwnPropertySymbols(e);t&&(a=a.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),n.push.apply(n,a)}return n}function o(e){for(var t=1;t<arguments.length;t++){var n=null!=arguments[t]?arguments[t]:{};t%2?i(Object(n),!0).forEach((function(t){r(e,t,n[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):i(Object(n)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(n,t))}))}return e}function l(e,t){if(null==e)return{};var n,a,r=function(e,t){if(null==e)return{};var n,a,r={},i=Object.keys(e);for(a=0;a<i.length;a++)n=i[a],t.indexOf(n)>=0||(r[n]=e[n]);return r}(e,t);if(Object.getOwnPropertySymbols){var i=Object.getOwnPropertySymbols(e);for(a=0;a<i.length;a++)n=i[a],t.indexOf(n)>=0||Object.prototype.propertyIsEnumerable.call(e,n)&&(r[n]=e[n])}return r}var c=a.createContext({}),d=function(e){var t=a.useContext(c),n=t;return e&&(n="function"==typeof e?e(t):o(o({},t),e)),n},s=function(e){var t=d(e.components);return a.createElement(c.Provider,{value:t},e.children)},p={inlineCode:"code",wrapper:function(e){var t=e.children;return a.createElement(a.Fragment,{},t)}},u=a.forwardRef((function(e,t){var n=e.components,r=e.mdxType,i=e.originalType,c=e.parentName,s=l(e,["components","mdxType","originalType","parentName"]),u=d(n),h=r,m=u["".concat(c,".").concat(h)]||u[h]||p[h]||i;return n?a.createElement(m,o(o({ref:t},s),{},{components:n})):a.createElement(m,o({ref:t},s))}));function h(e,t){var n=arguments,r=t&&t.mdxType;if("string"==typeof e||r){var i=n.length,o=new Array(i);o[0]=u;var l={};for(var c in t)hasOwnProperty.call(t,c)&&(l[c]=t[c]);l.originalType=e,l.mdxType="string"==typeof e?e:r,o[1]=l;for(var d=2;d<i;d++)o[d]=n[d];return a.createElement.apply(null,o)}return a.createElement.apply(null,n)}u.displayName="MDXCreateElement"},462:function(e,t,n){"use strict";n.r(t),n.d(t,{frontMatter:function(){return l},contentTitle:function(){return c},metadata:function(){return d},toc:function(){return s},default:function(){return u}});var a=n(2122),r=n(9756),i=(n(7294),n(3905)),o=["components"],l={},c="CloudKitSynchronizer",d={unversionedId:"api/core/CloudKitSynchronizer",id:"api/core/CloudKitSynchronizer",isDocsHomePage:!1,title:"CloudKitSynchronizer",description:"A CloudKitSynchronizer object takes care of making all the required calls to CloudKit to keep your model synchronized, using the provided",source:"@site/docs/api/core/CloudKitSynchronizer.md",sourceDirName:"api/core",slug:"/api/core/CloudKitSynchronizer",permalink:"/api/core/CloudKitSynchronizer",version:"current",frontMatter:{},sidebar:"API",previous:{title:"CloudKitDatabaseAdapter",permalink:"/api/core/CloudKitDatabaseAdapter"},next:{title:"CloudKitSynchronizerDelegate",permalink:"/api/core/CloudKitSynchronizerDelegate"}},s=[{value:"Inheritance",id:"inheritance",children:[]},{value:"Initializers",id:"initializers",children:[{value:"<code>init(identifier:containerIdentifier:database:adapterProvider:keyValueStore:)</code>",id:"initidentifiercontaineridentifierdatabaseadapterproviderkeyvaluestore",children:[]}]},{value:"Properties",id:"properties",children:[{value:"<code>contexts</code>",id:"contexts",children:[]},{value:"<code>errorDomain</code>",id:"errordomain",children:[]},{value:"<code>errorKey</code>",id:"errorkey",children:[]},{value:"<code>identifier</code>",id:"identifier",children:[]},{value:"<code>containerIdentifier</code>",id:"containeridentifier",children:[]},{value:"<code>database</code>",id:"database",children:[]},{value:"<code>adapterProvider</code>",id:"adapterprovider",children:[]},{value:"<code>keyValueStore</code>",id:"keyvaluestore",children:[]},{value:"<code>syncing</code>",id:"syncing",children:[]},{value:"<code>batchSize</code>",id:"batchsize",children:[]},{value:"<code>compatibilityVersion</code>",id:"compatibilityversion",children:[]},{value:"<code>syncMode</code>",id:"syncmode",children:[]},{value:"<code>delegate</code>",id:"delegate",children:[]},{value:"<code>defaultBatchSize</code>",id:"defaultbatchsize",children:[]},{value:"<code>metadataKeys</code>",id:"metadatakeys",children:[]},{value:"<code>modelAdapters</code>",id:"modeladapters",children:[]},{value:"<code>realms</code>",id:"realms",children:[]},{value:"<code>realms</code>",id:"realms-1",children:[]}]},{value:"Methods",id:"methods",children:[{value:"<code>privateSynchronizer(containerName:managedObjectContext:suiteName:recordZoneID:)</code>",id:"privatesynchronizercontainernamemanagedobjectcontextsuitenamerecordzoneid",children:[]},{value:"<code>sharedSynchronizer(containerName:objectModel:suiteName:)</code>",id:"sharedsynchronizercontainernameobjectmodelsuitename",children:[]},{value:"<code>multiFetchedResultsController(fetchRequest:)</code>",id:"multifetchedresultscontrollerfetchrequest",children:[]},{value:"<code>share(for:)</code>",id:"sharefor",children:[]},{value:"<code>cloudSharingControllerDidSaveShare(_:for:)</code>",id:"cloudsharingcontrollerdidsaveshare_for",children:[]},{value:"<code>cloudSharingControllerDidStopSharing(for:)</code>",id:"cloudsharingcontrollerdidstopsharingfor",children:[]},{value:"<code>share(object:publicPermission:participants:completion:)</code>",id:"shareobjectpublicpermissionparticipantscompletion",children:[]},{value:"<code>removeShare(for:completion:)</code>",id:"removeshareforcompletion",children:[]},{value:"<code>reuploadRecordsForChildrenOf(root:completion:)</code>",id:"reuploadrecordsforchildrenofrootcompletion",children:[]},{value:"<code>subscriptionID(forRecordZoneID:)</code>",id:"subscriptionidforrecordzoneid",children:[]},{value:"<code>subscriptionIDForDatabaseSubscription()</code>",id:"subscriptionidfordatabasesubscription",children:[]},{value:"<code>subscribeForChangesInDatabase(completion:)</code>",id:"subscribeforchangesindatabasecompletion",children:[]},{value:"<code>subscribeForChanges(in:completion:)</code>",id:"subscribeforchangesincompletion",children:[]},{value:"<code>cancelSubscriptionForChangesInDatabase(completion:)</code>",id:"cancelsubscriptionforchangesindatabasecompletion",children:[]},{value:"<code>cancelSubscriptionForChanges(in:completion:)</code>",id:"cancelsubscriptionforchangesincompletion",children:[]},{value:"<code>synchronize(completion:)</code>",id:"synchronizecompletion",children:[]},{value:"<code>cancelSynchronization()</code>",id:"cancelsynchronization",children:[]},{value:"<code>resetDatabaseToken()</code>",id:"resetdatabasetoken",children:[]},{value:"<code>eraseLocalMetadata()</code>",id:"eraselocalmetadata",children:[]},{value:"<code>deleteRecordZone(for:completion:)</code>",id:"deleterecordzoneforcompletion",children:[]},{value:"<code>addModelAdapter(_:)</code>",id:"addmodeladapter_",children:[]},{value:"<code>removeModelAdapter(_:)</code>",id:"removemodeladapter_",children:[]},{value:"<code>multiRealmResultsController(predicate:)</code>",id:"multirealmresultscontrollerpredicate",children:[]},{value:"<code>privateSynchronizer(containerName:configuration:suiteName:recordZoneID:)</code>",id:"privatesynchronizercontainernameconfigurationsuitenamerecordzoneid",children:[]},{value:"<code>sharedSynchronizer(containerName:configuration:suiteName:)</code>",id:"sharedsynchronizercontainernameconfigurationsuitename",children:[]},{value:"<code>multiRealmResultsController(predicate:)</code>",id:"multirealmresultscontrollerpredicate-1",children:[]},{value:"<code>privateSynchronizer(containerName:configuration:suiteName:recordZoneID:)</code>",id:"privatesynchronizercontainernameconfigurationsuitenamerecordzoneid-1",children:[]},{value:"<code>sharedSynchronizer(containerName:configuration:suiteName:)</code>",id:"sharedsynchronizercontainernameconfigurationsuitename-1",children:[]}]}],p={toc:s};function u(e){var t=e.components,n=(0,r.Z)(e,o);return(0,i.kt)("wrapper",(0,a.Z)({},p,n,{components:t,mdxType:"MDXLayout"}),(0,i.kt)("h1",{id:"cloudkitsynchronizer"},"CloudKitSynchronizer"),(0,i.kt)("p",null,"A ",(0,i.kt)("inlineCode",{parentName:"p"},"CloudKitSynchronizer")," object takes care of making all the required calls to CloudKit to keep your model synchronized, using the provided\n",(0,i.kt)("inlineCode",{parentName:"p"},"ModelAdapter")," to interact with it."),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-swift"},"public class CloudKitSynchronizer: NSObject \n")),(0,i.kt)("p",null,(0,i.kt)("inlineCode",{parentName:"p"},"CloudKitSynchronizer")," will post notifications at different steps of the synchronization process."),(0,i.kt)("h2",{id:"inheritance"},"Inheritance"),(0,i.kt)("p",null,(0,i.kt)("inlineCode",{parentName:"p"},"NSObject")),(0,i.kt)("h2",{id:"initializers"},"Initializers"),(0,i.kt)("h3",{id:"initidentifiercontaineridentifierdatabaseadapterproviderkeyvaluestore"},(0,i.kt)("inlineCode",{parentName:"h3"},"init(identifier:containerIdentifier:database:adapterProvider:keyValueStore:)")),(0,i.kt)("p",null,"Initializes a newly allocated synchronizer."),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-swift"},"@objc public init(identifier: String, containerIdentifier: String, database: CloudKitDatabaseAdapter, adapterProvider: AdapterProvider, keyValueStore: KeyValueStore = UserDefaultsAdapter(userDefaults: UserDefaults.standard)) \n")),(0,i.kt)("h4",{id:"parameters"},"Parameters"),(0,i.kt)("ul",null,(0,i.kt)("li",{parentName:"ul"},"identifier: Identifier for the ",(0,i.kt)("inlineCode",{parentName:"li"},"QSCloudKitSynchronizer"),"."),(0,i.kt)("li",{parentName:"ul"},"containerIdentifier: Identifier of the iCloud container to be used. The application must have the right entitlements to be able to access this container."),(0,i.kt)("li",{parentName:"ul"},"database: Private or Shared CloudKit Database"),(0,i.kt)("li",{parentName:"ul"},"adapterProvider: ",(0,i.kt)("inlineCode",{parentName:"li"},"CloudKitSynchronizerAdapterProvider")),(0,i.kt)("li",{parentName:"ul"},"keyValueStore: Object conforming to KeyValueStore (",(0,i.kt)("inlineCode",{parentName:"li"},"UserDefaultsAdapter"),", for example)")),(0,i.kt)("h4",{id:"returns"},"Returns"),(0,i.kt)("p",null,"Initialized synchronizer or ",(0,i.kt)("inlineCode",{parentName:"p"},"nil")," if no iCloud container can be found with the provided identifier."),(0,i.kt)("h2",{id:"properties"},"Properties"),(0,i.kt)("h3",{id:"contexts"},(0,i.kt)("inlineCode",{parentName:"h3"},"contexts")),(0,i.kt)("p",null,"List of ",(0,i.kt)("inlineCode",{parentName:"p"},"NSManagedObjectContext")," kept in sync by the synchronizer. Usually just the one you provided, for the default private synchronizer, but the shared synchronizer will have one Core Data context for each record zone shared with this user."),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-swift"},"@objc public var contexts: [NSManagedObjectContext] \n")),(0,i.kt)("h3",{id:"errordomain"},(0,i.kt)("inlineCode",{parentName:"h3"},"errorDomain")),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-swift"},'public static let errorDomain = "CloudKitSynchronizerErrorDomain"\n')),(0,i.kt)("h3",{id:"errorkey"},(0,i.kt)("inlineCode",{parentName:"h3"},"errorKey")),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-swift"},'public static let errorKey = "CloudKitSynchronizerErrorKey"\n')),(0,i.kt)("h3",{id:"identifier"},(0,i.kt)("inlineCode",{parentName:"h3"},"identifier")),(0,i.kt)("p",null,"More than one ",(0,i.kt)("inlineCode",{parentName:"p"},"CloudKitSynchronizer")," may be created in an app.\nThe identifier is used to persist some state, so it should always be the same for a synchronizer \u2013if you change your app to use a different identifier state might be lost."),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-swift"},"@objc public let identifier: String\n")),(0,i.kt)("h3",{id:"containeridentifier"},(0,i.kt)("inlineCode",{parentName:"h3"},"containerIdentifier")),(0,i.kt)("p",null,"iCloud container identifier."),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-swift"},"@objc public let containerIdentifier: String\n")),(0,i.kt)("h3",{id:"database"},(0,i.kt)("inlineCode",{parentName:"h3"},"database")),(0,i.kt)("p",null,"Adapter wrapping a ",(0,i.kt)("inlineCode",{parentName:"p"},"CKDatabase"),". The synchronizer will run CloudKit operations on the given database."),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-swift"},"public let database: CloudKitDatabaseAdapter\n")),(0,i.kt)("h3",{id:"adapterprovider"},(0,i.kt)("inlineCode",{parentName:"h3"},"adapterProvider")),(0,i.kt)("p",null,"Provides the model adapter to the synchronizer."),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-swift"},"@objc public let adapterProvider: AdapterProvider\n")),(0,i.kt)("h3",{id:"keyvaluestore"},(0,i.kt)("inlineCode",{parentName:"h3"},"keyValueStore")),(0,i.kt)("p",null,"Required by the synchronizer to persist some state. ",(0,i.kt)("inlineCode",{parentName:"p"},"UserDefaults")," can be used via ",(0,i.kt)("inlineCode",{parentName:"p"},"UserDefaultsAdapter"),"."),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-swift"},"public let keyValueStore: KeyValueStore\n")),(0,i.kt)("h3",{id:"syncing"},(0,i.kt)("inlineCode",{parentName:"h3"},"syncing")),(0,i.kt)("p",null,"Indicates whether the instance is currently synchronizing data."),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-swift"},"@objc public internal(set) var syncing: Bool = false\n")),(0,i.kt)("h3",{id:"batchsize"},(0,i.kt)("inlineCode",{parentName:"h3"},"batchSize")),(0,i.kt)("p",null,"Number of records that are sent in an upload operation."),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-swift"},"@objc public var batchSize: Int = CloudKitSynchronizer.defaultBatchSize\n")),(0,i.kt)("h3",{id:"compatibilityversion"},(0,i.kt)("inlineCode",{parentName:"h3"},"compatibilityVersion")),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-swift"},"@objc public var compatibilityVersion: Int = 0\n")),(0,i.kt)("ul",null,(0,i.kt)("li",{parentName:"ul"},"When set, if the synchronizer finds records uploaded by a different device using a higher compatibility version,"),(0,i.kt)("li",{parentName:"ul"},"it will end synchronization with a ",(0,i.kt)("inlineCode",{parentName:"li"},"higherModelVersionFound")," error.")),(0,i.kt)("h3",{id:"syncmode"},(0,i.kt)("inlineCode",{parentName:"h3"},"syncMode")),(0,i.kt)("p",null,"Whether the synchronizer will only download data or also upload any local changes."),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-swift"},"@objc public var syncMode: SynchronizeMode = .sync\n")),(0,i.kt)("h3",{id:"delegate"},(0,i.kt)("inlineCode",{parentName:"h3"},"delegate")),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-swift"},"@objc public var delegate: CloudKitSynchronizerDelegate?\n")),(0,i.kt)("h3",{id:"defaultbatchsize"},(0,i.kt)("inlineCode",{parentName:"h3"},"defaultBatchSize")),(0,i.kt)("p",null,"Default number of records to send in an upload operation."),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-swift"},"@objc public static var defaultBatchSize = 200\n")),(0,i.kt)("h3",{id:"metadatakeys"},(0,i.kt)("inlineCode",{parentName:"h3"},"metadataKeys")),(0,i.kt)("p",null,"These keys will be added to CKRecords uploaded to CloudKit and are used by SyncKit internally."),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-swift"},"public static let metadataKeys: [String] = [CloudKitSynchronizer.deviceUUIDKey, CloudKitSynchronizer.modelCompatibilityVersionKey]\n")),(0,i.kt)("h3",{id:"modeladapters"},(0,i.kt)("inlineCode",{parentName:"h3"},"modelAdapters")),(0,i.kt)("p",null,"Model adapters in use by this synchronizer"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-swift"},"@objc public var modelAdapters: [ModelAdapter] \n")),(0,i.kt)("h3",{id:"realms"},(0,i.kt)("inlineCode",{parentName:"h3"},"realms")),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-swift"},"public var realms: [RLMRealm] \n")),(0,i.kt)("h3",{id:"realms-1"},(0,i.kt)("inlineCode",{parentName:"h3"},"realms")),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-swift"},"public var realms: [Realm] \n")),(0,i.kt)("h2",{id:"methods"},"Methods"),(0,i.kt)("h3",{id:"privatesynchronizercontainernamemanagedobjectcontextsuitenamerecordzoneid"},(0,i.kt)("inlineCode",{parentName:"h3"},"privateSynchronizer(containerName:managedObjectContext:suiteName:recordZoneID:)")),(0,i.kt)("p",null,"Creates a new, default synchronizer for the user's private database"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-swift"},"@objc public static func privateSynchronizer(containerName: String,\n                                           managedObjectContext: NSManagedObjectContext,\n                                           suiteName: String? = nil,\n                                           recordZoneID: CKRecordZone.ID? = nil) -> CloudKitSynchronizer \n")),(0,i.kt)("h4",{id:"parameters-1"},"Parameters"),(0,i.kt)("ul",null,(0,i.kt)("li",{parentName:"ul"},"containerName: CloudKit container name."),(0,i.kt)("li",{parentName:"ul"},"managedObjectContext: ",(0,i.kt)("inlineCode",{parentName:"li"},"NSManagedObject")," that should be used for synchronization. Changes in it will be uploaded and downloaded to/from CloudKit."),(0,i.kt)("li",{parentName:"ul"},"suiteName: App suite, if this app is part of one. If provided, synchronizer's state will be saved in the app group."),(0,i.kt)("li",{parentName:"ul"},"recordZoneID: ",(0,i.kt)("inlineCode",{parentName:"li"},"CKRecordZoneID")," to be used for synchronization. If not provided, default value will be ",(0,i.kt)("inlineCode",{parentName:"li"},'CKRecordZone.ID(zoneName: "QSCloudKitCustomZoneName", ownerName: CKCurrentUserDefaultName)'),".")),(0,i.kt)("h4",{id:"returns-1"},"Returns"),(0,i.kt)("p",null,"A fully configured ",(0,i.kt)("inlineCode",{parentName:"p"},"CloudKitSynchronizer")," for the private database."),(0,i.kt)("h3",{id:"sharedsynchronizercontainernameobjectmodelsuitename"},(0,i.kt)("inlineCode",{parentName:"h3"},"sharedSynchronizer(containerName:objectModel:suiteName:)")),(0,i.kt)("p",null,"Creates a new, default synchronizer for the user's shared database."),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-swift"},"@objc public static func sharedSynchronizer(containerName: String,\n                                          objectModel: NSManagedObjectModel,\n                                          suiteName: String? = nil) -> CloudKitSynchronizer \n")),(0,i.kt)("h4",{id:"parameters-2"},"Parameters"),(0,i.kt)("ul",null,(0,i.kt)("li",{parentName:"ul"},"containerName: CloudKit container name."),(0,i.kt)("li",{parentName:"ul"},"objectModel: ",(0,i.kt)("inlineCode",{parentName:"li"},"NSManagedObjectModel")," that is used for synchronization."),(0,i.kt)("li",{parentName:"ul"},"suiteName: App suite, if this app is part of one. If provided, synchronizer's state will be saved in the app group.")),(0,i.kt)("h4",{id:"returns-2"},"Returns"),(0,i.kt)("p",null,"A fully configured ",(0,i.kt)("inlineCode",{parentName:"p"},"CloudKitSynchronizer")," for the shared database."),(0,i.kt)("h3",{id:"multifetchedresultscontrollerfetchrequest"},(0,i.kt)("inlineCode",{parentName:"h3"},"multiFetchedResultsController(fetchRequest:)")),(0,i.kt)("p",null,"Creates a multiFetchedResultsController to simplify dealing with results from multiple ",(0,i.kt)("inlineCode",{parentName:"p"},"NSManagedObjectContext")," instances."),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-swift"},"public func multiFetchedResultsController(fetchRequest: NSFetchRequest<NSFetchRequestResult>) -> CoreDataMultiFetchedResultsController? \n")),(0,i.kt)("h4",{id:"parameters-3"},"Parameters"),(0,i.kt)("ul",null,(0,i.kt)("li",{parentName:"ul"},"fetchRequest: Fetch request to be applied to managed contexts.")),(0,i.kt)("h4",{id:"returns-3"},"Returns"),(0,i.kt)("p",null,"Configured controller. This controller can be particularly useful to retrieve data from a shared synchronizer, as it will potentially be coming from multiple ",(0,i.kt)("inlineCode",{parentName:"p"},"NSManagedObjectContext"),"s."),(0,i.kt)("h3",{id:"sharefor"},(0,i.kt)("inlineCode",{parentName:"h3"},"share(for:)")),(0,i.kt)("p",null,"Returns the locally stored ",(0,i.kt)("inlineCode",{parentName:"p"},"CKShare")," for a given model object."),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-swift"},"@objc func share(for object: AnyObject) -> CKShare? \n")),(0,i.kt)("ul",null,(0,i.kt)("li",{parentName:"ul"},"Parameter object  The model object.")),(0,i.kt)("h4",{id:"returns-4"},"Returns"),(0,i.kt)("p",null,(0,i.kt)("inlineCode",{parentName:"p"},"CKShare")," stored for the given object."),(0,i.kt)("h3",{id:"cloudsharingcontrollerdidsaveshare_for"},(0,i.kt)("inlineCode",{parentName:"h3"},"cloudSharingControllerDidSaveShare(_:for:)")),(0,i.kt)("p",null,"Saves the given ",(0,i.kt)("inlineCode",{parentName:"p"},"CKShare")," locally for the given model object."),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-swift"},"@objc func cloudSharingControllerDidSaveShare(_ share: CKShare, for object: AnyObject) \n")),(0,i.kt)("ul",null,(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("p",{parentName:"li"},"share The ",(0,i.kt)("inlineCode",{parentName:"p"},"CKShare"),".")),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("p",{parentName:"li"},"object  The model object."))),(0,i.kt)("h3",{id:"cloudsharingcontrollerdidstopsharingfor"},(0,i.kt)("inlineCode",{parentName:"h3"},"cloudSharingControllerDidStopSharing(for:)")),(0,i.kt)("p",null,"Deletes any ",(0,i.kt)("inlineCode",{parentName:"p"},"CKShare")," locally stored  for the given model object."),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-swift"},"@objc func cloudSharingControllerDidStopSharing(for object: AnyObject) \n")),(0,i.kt)("ul",null,(0,i.kt)("li",{parentName:"ul"},"object  The model object.\nThis method should be called by your ",(0,i.kt)("inlineCode",{parentName:"li"},"UICloudSharingControllerDelegate"),", when ",(0,i.kt)("inlineCode",{parentName:"li"},"cloudSharingControllerDidStopSharing")," is called.")),(0,i.kt)("h3",{id:"shareobjectpublicpermissionparticipantscompletion"},(0,i.kt)("inlineCode",{parentName:"h3"},"share(object:publicPermission:participants:completion:)")),(0,i.kt)("p",null,"Returns a  ",(0,i.kt)("inlineCode",{parentName:"p"},"CKShare")," for the given model object. If one does not exist, it creates and uploads a new"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-swift"},"@objc func share(object: AnyObject, publicPermission: CKShare.Participant.Permission, participants: [CKShare.Participant], completion: ((CKShare?, Error?) -> ())?) \n")),(0,i.kt)("ul",null,(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("p",{parentName:"li"},"object The model object to share.")),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("p",{parentName:"li"},"publicPermission  The permissions to be used for the new share."))),(0,i.kt)("h4",{id:"parameters-4"},"Parameters"),(0,i.kt)("ul",null,(0,i.kt)("li",{parentName:"ul"},"participants: The participants to add to this share."),(0,i.kt)("li",{parentName:"ul"},"completion: Closure that gets called with an optional error when the operation is completed.")),(0,i.kt)("h3",{id:"removeshareforcompletion"},(0,i.kt)("inlineCode",{parentName:"h3"},"removeShare(for:completion:)")),(0,i.kt)("p",null,"Removes the existing ",(0,i.kt)("inlineCode",{parentName:"p"},"CKShare")," for an object and deletes it from CloudKit."),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-swift"},"@objc func removeShare(for object: AnyObject, completion: ((Error?) -> ())?) \n")),(0,i.kt)("ul",null,(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("p",{parentName:"li"},"object  The model object.")),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("p",{parentName:"li"},"completion Closure that gets called on completion."))),(0,i.kt)("h3",{id:"reuploadrecordsforchildrenofrootcompletion"},(0,i.kt)("inlineCode",{parentName:"h3"},"reuploadRecordsForChildrenOf(root:completion:)")),(0,i.kt)("p",null,"Reuploads to CloudKit all ",(0,i.kt)("inlineCode",{parentName:"p"},"CKRecord"),"s for the given root model object and all of its children (see ",(0,i.kt)("inlineCode",{parentName:"p"},"ParentKey"),"). This function can be used to ensure all objects in the hierarchy have their ",(0,i.kt)("inlineCode",{parentName:"p"},"parent")," property correctly set, before sharing, if their records had been created before sharing was supported."),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-swift"},"@objc func reuploadRecordsForChildrenOf(root: AnyObject, completion: @escaping ((Error?) -> ())) \n")),(0,i.kt)("ul",null,(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("p",{parentName:"li"},"root The root model object.")),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("p",{parentName:"li"},"completion Closure that gets called on completion."))),(0,i.kt)("h3",{id:"subscriptionidforrecordzoneid"},(0,i.kt)("inlineCode",{parentName:"h3"},"subscriptionID(forRecordZoneID:)")),(0,i.kt)("p",null,"Returns identifier for a registered ",(0,i.kt)("inlineCode",{parentName:"p"},"CKSubscription")," to track changes."),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-swift"},"@objc func subscriptionID(forRecordZoneID zoneID: CKRecordZone.ID) -> String? \n")),(0,i.kt)("h4",{id:"parameters-5"},"Parameters"),(0,i.kt)("ul",null,(0,i.kt)("li",{parentName:"ul"},"zoneID: ",(0,i.kt)("inlineCode",{parentName:"li"},"CKRecordZoneID")," that is being tracked with the subscription.")),(0,i.kt)("h4",{id:"returns-5"},"Returns"),(0,i.kt)("p",null,"Identifier of an existing ",(0,i.kt)("inlineCode",{parentName:"p"},"CKSubscription")," for the record zone, if there is one."),(0,i.kt)("h3",{id:"subscriptionidfordatabasesubscription"},(0,i.kt)("inlineCode",{parentName:"h3"},"subscriptionIDForDatabaseSubscription()")),(0,i.kt)("p",null,"Returns identifier for a registered ",(0,i.kt)("inlineCode",{parentName:"p"},"CKSubscription")," to track changes in the synchronizer's database."),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-swift"},"@objc func subscriptionIDForDatabaseSubscription() -> String? \n")),(0,i.kt)("h4",{id:"returns-6"},"Returns"),(0,i.kt)("p",null,"Identifier of an existing ",(0,i.kt)("inlineCode",{parentName:"p"},"CKSubscription")," for this database, if there is one."),(0,i.kt)("h3",{id:"subscribeforchangesindatabasecompletion"},(0,i.kt)("inlineCode",{parentName:"h3"},"subscribeForChangesInDatabase(completion:)")),(0,i.kt)("p",null,"Creates a new database subscription with CloudKit so the application can receive notifications when new changes happen. The application is responsible for registering for remote notifications and initiating synchronization when a notification is received. @see ",(0,i.kt)("inlineCode",{parentName:"p"},"CKSubscription")),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-swift"},"@objc func subscribeForChangesInDatabase(completion: ((Error?)->())?) \n")),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre"},"*  Creates a new database subscription with CloudKit so the application can receive notifications when new changes happen. The application is responsible for registering for remote notifications and initiating synchronization when a notification is received. @see `CKSubscription`\n*\n*  -Parameter completion Block that will be called after subscription is created, with an optional error.\n")),(0,i.kt)("h4",{id:"parameters-6"},"Parameters"),(0,i.kt)("ul",null,(0,i.kt)("li",{parentName:"ul"},"completion: Block that will be called after subscription is created, with an optional error.")),(0,i.kt)("h3",{id:"subscribeforchangesincompletion"},(0,i.kt)("inlineCode",{parentName:"h3"},"subscribeForChanges(in:completion:)")),(0,i.kt)("p",null,"Creates a new subscription with CloudKit so the application can receive notifications when new changes happen. The application is responsible for registering for remote notifications and initiating synchronization when a notification is received. @see ",(0,i.kt)("inlineCode",{parentName:"p"},"CKSubscription")),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-swift"},"@objc func subscribeForChanges(in zoneID: CKRecordZone.ID, completion: ((Error?)->())?) \n")),(0,i.kt)("h4",{id:"parameters-7"},"Parameters"),(0,i.kt)("ul",null,(0,i.kt)("li",{parentName:"ul"},"zoneID: ",(0,i.kt)("inlineCode",{parentName:"li"},"CKRecordZoneID")," to track for changes"),(0,i.kt)("li",{parentName:"ul"},"completion: Block that will be called after subscription is created, with an optional error.")),(0,i.kt)("h3",{id:"cancelsubscriptionforchangesindatabasecompletion"},(0,i.kt)("inlineCode",{parentName:"h3"},"cancelSubscriptionForChangesInDatabase(completion:)")),(0,i.kt)("p",null,"Delete existing database subscription to stop receiving notifications."),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-swift"},"@objc func cancelSubscriptionForChangesInDatabase(completion: ((Error?)->())?) \n")),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre"},"*  Delete existing database subscription to stop receiving notifications.\n*\n*  -Parameter completion Block that will be called after subscription is deleted, with an optional error.\n")),(0,i.kt)("h4",{id:"parameters-8"},"Parameters"),(0,i.kt)("ul",null,(0,i.kt)("li",{parentName:"ul"},"completion: Block that will be called after subscription is deleted, with an optional error.")),(0,i.kt)("h3",{id:"cancelsubscriptionforchangesincompletion"},(0,i.kt)("inlineCode",{parentName:"h3"},"cancelSubscriptionForChanges(in:completion:)")),(0,i.kt)("p",null,"Delete existing subscription to stop receiving notifications."),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-swift"},"@objc func cancelSubscriptionForChanges(in zoneID: CKRecordZone.ID, completion: ((Error?)->())?) \n")),(0,i.kt)("h4",{id:"parameters-9"},"Parameters"),(0,i.kt)("ul",null,(0,i.kt)("li",{parentName:"ul"},"zoneID: ",(0,i.kt)("inlineCode",{parentName:"li"},"CKRecordZoneID")," to stop tracking for changes."),(0,i.kt)("li",{parentName:"ul"},"completion: Block that will be called after subscription is deleted, with an optional error.")),(0,i.kt)("h3",{id:"synchronizecompletion"},(0,i.kt)("inlineCode",{parentName:"h3"},"synchronize(completion:)")),(0,i.kt)("p",null,"Synchronize data with CloudKit."),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-swift"},"@objc public func synchronize(completion: ((Error?) -> ())?) \n")),(0,i.kt)("h4",{id:"parameters-10"},"Parameters"),(0,i.kt)("ul",null,(0,i.kt)("li",{parentName:"ul"},"completion: Completion block that receives an optional error. Could be a ",(0,i.kt)("inlineCode",{parentName:"li"},"SyncError"),", ",(0,i.kt)("inlineCode",{parentName:"li"},"CKError"),", or any other error found during synchronization.")),(0,i.kt)("h3",{id:"cancelsynchronization"},(0,i.kt)("inlineCode",{parentName:"h3"},"cancelSynchronization()")),(0,i.kt)("p",null,"Cancel synchronization. It will cause a current synchronization to end with a ",(0,i.kt)("inlineCode",{parentName:"p"},"cancelled")," error."),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-swift"},"@objc public func cancelSynchronization() \n")),(0,i.kt)("h3",{id:"resetdatabasetoken"},(0,i.kt)("inlineCode",{parentName:"h3"},"resetDatabaseToken()")),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-swift"},"@objc public func resetDatabaseToken() \n")),(0,i.kt)("ul",null,(0,i.kt)("li",{parentName:"ul"},"Deletes saved database token, so next synchronization will include changes in all record zones in the database."),(0,i.kt)("li",{parentName:"ul"},"This does not reset tokens stored by model adapters.")),(0,i.kt)("h3",{id:"eraselocalmetadata"},(0,i.kt)("inlineCode",{parentName:"h3"},"eraseLocalMetadata()")),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-swift"},"@objc public func eraseLocalMetadata() \n")),(0,i.kt)("ul",null,(0,i.kt)("li",{parentName:"ul"},"Deletes saved database token and all local metadata used to track changes in models."),(0,i.kt)("li",{parentName:"ul"},"The synchronizer should not be used after calling this function, create a new synchronizer instead if you need it.")),(0,i.kt)("h3",{id:"deleterecordzoneforcompletion"},(0,i.kt)("inlineCode",{parentName:"h3"},"deleteRecordZone(for:completion:)")),(0,i.kt)("p",null,"Deletes the corresponding record zone on CloudKit, along with any data in it."),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-swift"},"@objc public func deleteRecordZone(for adapter: ModelAdapter, completion: ((Error?)->())?) \n")),(0,i.kt)("h4",{id:"parameters-11"},"Parameters"),(0,i.kt)("ul",null,(0,i.kt)("li",{parentName:"ul"},"adapter: Model adapter whose corresponding record zone should be deleted"),(0,i.kt)("li",{parentName:"ul"},"completion: Completion block.")),(0,i.kt)("h3",{id:"addmodeladapter_"},(0,i.kt)("inlineCode",{parentName:"h3"},"addModelAdapter(_:)")),(0,i.kt)("p",null,"Adds a new model adapter to be synchronized with CloudKit."),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-swift"},"@objc public func addModelAdapter(_ adapter: ModelAdapter) \n")),(0,i.kt)("h4",{id:"parameters-12"},"Parameters"),(0,i.kt)("ul",null,(0,i.kt)("li",{parentName:"ul"},"adapter: The adapter to be managed by this synchronizer.")),(0,i.kt)("h3",{id:"removemodeladapter_"},(0,i.kt)("inlineCode",{parentName:"h3"},"removeModelAdapter(_:)")),(0,i.kt)("p",null,"Removes the model adapter so data managed by it won't be synced with CloudKit any more."),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-swift"},"@objc  public func removeModelAdapter(_ adapter: ModelAdapter) \n")),(0,i.kt)("h4",{id:"parameters-13"},"Parameters"),(0,i.kt)("ul",null,(0,i.kt)("li",{parentName:"ul"},"adapter: Adapter to be removed from the synchronizer")),(0,i.kt)("h3",{id:"multirealmresultscontrollerpredicate"},(0,i.kt)("inlineCode",{parentName:"h3"},"multiRealmResultsController(predicate:)")),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-swift"},"public func multiRealmResultsController<T: RLMObject>(predicate: NSPredicate? = nil) -> MultiRealmResultsController<T>? \n")),(0,i.kt)("h3",{id:"privatesynchronizercontainernameconfigurationsuitenamerecordzoneid"},(0,i.kt)("inlineCode",{parentName:"h3"},"privateSynchronizer(containerName:configuration:suiteName:recordZoneID:)")),(0,i.kt)("p",null,"-","Returns:\u200b A new CloudKit synchronizer for the given realm."),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-swift"},"public class func privateSynchronizer(containerName: String, configuration: RLMRealmConfiguration, suiteName: String? = nil, recordZoneID: CKRecordZone.ID? = nil) -> CloudKitSynchronizer \n")),(0,i.kt)("ul",null,(0,i.kt)("li",{parentName:"ul"},"Creates a new ",(0,i.kt)("inlineCode",{parentName:"li"},"QSCloudKitSynchronizer")," prepared to work with a Realm model and the SyncKit default record zone in the private database.")),(0,i.kt)("ul",null,(0,i.kt)("li",{parentName:"ul"},"Parameters:"),(0,i.kt)("li",{parentName:"ul"},"containerName: Identifier of the iCloud container to be used. The application must have the right entitlements to be able to access this container."),(0,i.kt)("li",{parentName:"ul"},"configuration: Configuration of the Realm that is to be tracked and synchronized."),(0,i.kt)("li",{parentName:"ul"},"suiteName: Identifier of shared App Group for the app. This will store the tracking database in the shared container.")),(0,i.kt)("h3",{id:"sharedsynchronizercontainernameconfigurationsuitename"},(0,i.kt)("inlineCode",{parentName:"h3"},"sharedSynchronizer(containerName:configuration:suiteName:)")),(0,i.kt)("p",null,"-","Returns:\u200b A new CloudKit synchronizer for the given realm."),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-swift"},"public class func sharedSynchronizer(containerName: String, configuration: RLMRealmConfiguration, suiteName: String? = nil) -> CloudKitSynchronizer \n")),(0,i.kt)("ul",null,(0,i.kt)("li",{parentName:"ul"},"Creates a new ",(0,i.kt)("inlineCode",{parentName:"li"},"QSCloudKitSynchronizer")," prepared to work with a Realm model and the shared database.")),(0,i.kt)("ul",null,(0,i.kt)("li",{parentName:"ul"},"Parameters:"),(0,i.kt)("li",{parentName:"ul"},"containerName: Identifier of the iCloud container to be used. The application must have the right entitlements to be able to access this container."),(0,i.kt)("li",{parentName:"ul"},"configuration: Configuration of the Realm that is to be tracked and synchronized."),(0,i.kt)("li",{parentName:"ul"},"suiteName: Identifier of shared App Group for the app. This will store the tracking database in the shared container.")),(0,i.kt)("h3",{id:"multirealmresultscontrollerpredicate-1"},(0,i.kt)("inlineCode",{parentName:"h3"},"multiRealmResultsController(predicate:)")),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-swift"},"public func multiRealmResultsController<T: Object>(predicate: NSPredicate? = nil) -> MultiRealmResultsController<T>? \n")),(0,i.kt)("h3",{id:"privatesynchronizercontainernameconfigurationsuitenamerecordzoneid-1"},(0,i.kt)("inlineCode",{parentName:"h3"},"privateSynchronizer(containerName:configuration:suiteName:recordZoneID:)")),(0,i.kt)("p",null,"-","Returns:\u200b A new CloudKit synchronizer for the given realm."),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-swift"},"public class func privateSynchronizer(containerName: String, configuration: Realm.Configuration, suiteName: String? = nil, recordZoneID: CKRecordZone.ID? = nil) -> CloudKitSynchronizer \n")),(0,i.kt)("ul",null,(0,i.kt)("li",{parentName:"ul"},"Creates a new ",(0,i.kt)("inlineCode",{parentName:"li"},"QSCloudKitSynchronizer")," prepared to work with a Realm model and the SyncKit default record zone in the private database.")),(0,i.kt)("ul",null,(0,i.kt)("li",{parentName:"ul"},"Parameters:"),(0,i.kt)("li",{parentName:"ul"},"containerName: Identifier of the iCloud container to be used. The application must have the right entitlements to be able to access this container."),(0,i.kt)("li",{parentName:"ul"},"configuration: Configuration of the Realm that is to be tracked and synchronized."),(0,i.kt)("li",{parentName:"ul"},"suiteName: Identifier of shared App Group for the app. This will store the tracking database in the shared container.")),(0,i.kt)("h3",{id:"sharedsynchronizercontainernameconfigurationsuitename-1"},(0,i.kt)("inlineCode",{parentName:"h3"},"sharedSynchronizer(containerName:configuration:suiteName:)")),(0,i.kt)("p",null,"-","Returns:\u200b A new CloudKit synchronizer for the given realm."),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-swift"},"public class func sharedSynchronizer(containerName: String, configuration: Realm.Configuration, suiteName: String? = nil) -> CloudKitSynchronizer \n")),(0,i.kt)("ul",null,(0,i.kt)("li",{parentName:"ul"},"Creates a new ",(0,i.kt)("inlineCode",{parentName:"li"},"QSCloudKitSynchronizer")," prepared to work with a Realm model and the shared database.")),(0,i.kt)("ul",null,(0,i.kt)("li",{parentName:"ul"},"Parameters:"),(0,i.kt)("li",{parentName:"ul"},"containerName: Identifier of the iCloud container to be used. The application must have the right entitlements to be able to access this container."),(0,i.kt)("li",{parentName:"ul"},"configuration: Configuration of the Realm that is to be tracked and synchronized."),(0,i.kt)("li",{parentName:"ul"},"suiteName: Identifier of shared App Group for the app. This will store the tracking database in the shared container.")))}u.isMDXComponent=!0}}]);