(window.webpackJsonp=window.webpackJsonp||[]).push([[30],{130:function(e,n,t){"use strict";t.d(n,"a",(function(){return p})),t.d(n,"b",(function(){return b}));var r=t(0),a=t.n(r);function i(e,n,t){return n in e?Object.defineProperty(e,n,{value:t,enumerable:!0,configurable:!0,writable:!0}):e[n]=t,e}function o(e,n){var t=Object.keys(e);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(e);n&&(r=r.filter((function(n){return Object.getOwnPropertyDescriptor(e,n).enumerable}))),t.push.apply(t,r)}return t}function c(e){for(var n=1;n<arguments.length;n++){var t=null!=arguments[n]?arguments[n]:{};n%2?o(Object(t),!0).forEach((function(n){i(e,n,t[n])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(t)):o(Object(t)).forEach((function(n){Object.defineProperty(e,n,Object.getOwnPropertyDescriptor(t,n))}))}return e}function l(e,n){if(null==e)return{};var t,r,a=function(e,n){if(null==e)return{};var t,r,a={},i=Object.keys(e);for(r=0;r<i.length;r++)t=i[r],n.indexOf(t)>=0||(a[t]=e[t]);return a}(e,n);if(Object.getOwnPropertySymbols){var i=Object.getOwnPropertySymbols(e);for(r=0;r<i.length;r++)t=i[r],n.indexOf(t)>=0||Object.prototype.propertyIsEnumerable.call(e,t)&&(a[t]=e[t])}return a}var u=a.a.createContext({}),s=function(e){var n=a.a.useContext(u),t=n;return e&&(t="function"==typeof e?e(n):c(c({},n),e)),t},p=function(e){var n=s(e.components);return a.a.createElement(u.Provider,{value:n},e.children)},d={inlineCode:"code",wrapper:function(e){var n=e.children;return a.a.createElement(a.a.Fragment,{},n)}},m=a.a.forwardRef((function(e,n){var t=e.components,r=e.mdxType,i=e.originalType,o=e.parentName,u=l(e,["components","mdxType","originalType","parentName"]),p=s(t),m=r,b=p["".concat(o,".").concat(m)]||p[m]||d[m]||i;return t?a.a.createElement(b,c(c({ref:n},u),{},{components:t})):a.a.createElement(b,c({ref:n},u))}));function b(e,n){var t=arguments,r=n&&n.mdxType;if("string"==typeof e||r){var i=t.length,o=new Array(i);o[0]=m;var c={};for(var l in n)hasOwnProperty.call(n,l)&&(c[l]=n[l]);c.originalType=e,c.mdxType="string"==typeof e?e:r,o[1]=c;for(var u=2;u<i;u++)o[u]=t[u];return a.a.createElement.apply(null,o)}return a.a.createElement.apply(null,t)}m.displayName="MDXCreateElement"},98:function(e,n,t){"use strict";t.r(n),t.d(n,"frontMatter",(function(){return o})),t.d(n,"metadata",(function(){return c})),t.d(n,"toc",(function(){return l})),t.d(n,"default",(function(){return s}));var r=t(3),a=t(7),i=(t(0),t(130)),o={},c={unversionedId:"RealmAPI/classes/CloudKitSynchronizerRealm",id:"RealmAPI/classes/CloudKitSynchronizerRealm",isDocsHomePage:!1,title:"CloudKitSynchronizerRealm",description:"CloudKitSynchronizer",source:"@site/docs/RealmAPI/classes/CloudKitSynchronizerRealm.md",slug:"/RealmAPI/classes/CloudKitSynchronizerRealm",permalink:"/SyncKit/RealmAPI/classes/CloudKitSynchronizerRealm",version:"current",sidebar:"api",previous:{title:"CoreDataMultiFetchedResultsControllerDelegate",permalink:"/SyncKit/CoreDataAPI/protocols/CoreDataMultiFetchedResultsControllerDelegate"},next:{title:"RealmAdapter",permalink:"/SyncKit/RealmAPI/classes/RealmAdapter"}},l=[{value:"<code>privateSynchronizer(containerName:configuration:suiteName:recordZoneID:)</code>",id:"privatesynchronizercontainernameconfigurationsuitenamerecordzoneid",children:[]},{value:"<code>sharedSynchronizer(containerName:configuration:suiteName:)</code>",id:"sharedsynchronizercontainernameconfigurationsuitename",children:[]},{value:"Properties",id:"properties",children:[{value:"<code>realms</code>",id:"realms",children:[]}]}],u={toc:l};function s(e){var n=e.components,t=Object(a.a)(e,["components"]);return Object(i.b)("wrapper",Object(r.a)({},u,t,{components:n,mdxType:"MDXLayout"}),Object(i.b)("h1",{id:"cloudkitsynchronizer"},Object(i.b)("inlineCode",{parentName:"h1"},"CloudKitSynchronizer")),Object(i.b)("pre",null,Object(i.b)("code",{parentName:"pre",className:"language-swift"},"@objc public extension CloudKitSynchronizer\n")),Object(i.b)("h3",{id:"privatesynchronizercontainernameconfigurationsuitenamerecordzoneid"},Object(i.b)("inlineCode",{parentName:"h3"},"privateSynchronizer(containerName:configuration:suiteName:recordZoneID:)")),Object(i.b)("pre",null,Object(i.b)("code",{parentName:"pre",className:"language-swift"},"public class func privateSynchronizer(containerName: String, configuration: RLMRealmConfiguration, suiteName: String? = nil, recordZoneID: CKRecordZone.ID? = nil) -> CloudKitSynchronizer\n")),Object(i.b)("ul",null,Object(i.b)("li",{parentName:"ul"},"Creates a new ",Object(i.b)("inlineCode",{parentName:"li"},"QSCloudKitSynchronizer")," prepared to work with a Realm model and the SyncKit default record zone in the private database.")),Object(i.b)("ul",null,Object(i.b)("li",{parentName:"ul"},"Parameters:"),Object(i.b)("li",{parentName:"ul"},"containerName: Identifier of the iCloud container to be used. The application must have the right entitlements to be able to access this container."),Object(i.b)("li",{parentName:"ul"},"configuration: Configuration of the Realm that is to be tracked and synchronized."),Object(i.b)("li",{parentName:"ul"},"suiteName: Identifier of shared App Group for the app. This will store the tracking database in the shared container.")),Object(i.b)("p",null,"-Returns: A new CloudKit synchronizer for the given realm."),Object(i.b)("h3",{id:"sharedsynchronizercontainernameconfigurationsuitename"},Object(i.b)("inlineCode",{parentName:"h3"},"sharedSynchronizer(containerName:configuration:suiteName:)")),Object(i.b)("pre",null,Object(i.b)("code",{parentName:"pre",className:"language-swift"},"public class func sharedSynchronizer(containerName: String, configuration: RLMRealmConfiguration, suiteName: String? = nil) -> CloudKitSynchronizer\n")),Object(i.b)("ul",null,Object(i.b)("li",{parentName:"ul"},"Creates a new ",Object(i.b)("inlineCode",{parentName:"li"},"QSCloudKitSynchronizer")," prepared to work with a Realm model and the shared database.")),Object(i.b)("ul",null,Object(i.b)("li",{parentName:"ul"},"Parameters:"),Object(i.b)("li",{parentName:"ul"},"containerName: Identifier of the iCloud container to be used. The application must have the right entitlements to be able to access this container."),Object(i.b)("li",{parentName:"ul"},"configuration: Configuration of the Realm that is to be tracked and synchronized."),Object(i.b)("li",{parentName:"ul"},"suiteName: Identifier of shared App Group for the app. This will store the tracking database in the shared container.")),Object(i.b)("p",null,"-Returns: A new CloudKit synchronizer for the given realm."),Object(i.b)("h2",{id:"properties"},"Properties"),Object(i.b)("h3",{id:"realms"},Object(i.b)("inlineCode",{parentName:"h3"},"realms")),Object(i.b)("pre",null,Object(i.b)("code",{parentName:"pre",className:"language-swift"},"public var realms: [RLMRealm]\n\n### `multiRealmResultsController(predicate:)`\n\n```swift\npublic func multiRealmResultsController<T: RLMObject>(predicate: NSPredicate? = nil) -> MultiRealmResultsController<T>?\n")))}s.isMDXComponent=!0}}]);