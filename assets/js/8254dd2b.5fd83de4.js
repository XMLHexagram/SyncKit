(window.webpackJsonp=window.webpackJsonp||[]).push([[38],{106:function(e,t,n){"use strict";n.r(t),n.d(t,"frontMatter",(function(){return o})),n.d(t,"metadata",(function(){return c})),n.d(t,"toc",(function(){return b})),n.d(t,"default",(function(){return s}));var r=n(3),a=n(7),i=(n(0),n(132)),o={},c={unversionedId:"Core/classes/CloudKitSynchronizerSubscription",id:"Core/classes/CloudKitSynchronizerSubscription",isDocsHomePage:!1,title:"CloudKitSynchronizerSubscription",description:"EXTENSION",source:"@site/docs/Core/classes/CloudKitSynchronizerSubscription.md",slug:"/Core/classes/CloudKitSynchronizerSubscription",permalink:"/SyncKit/Core/classes/CloudKitSynchronizerSubscription",version:"current",sidebar:"api",previous:{title:"CloudKitSynchronizerSharing",permalink:"/SyncKit/Core/classes/CloudKitSynchronizerSharing"},next:{title:"DefaultCloudKitDatabaseAdapter",permalink:"/SyncKit/Core/classes/DefaultCloudKitDatabaseAdapter"}},b=[{value:"<code>subscriptionID(forRecordZoneID:)</code>",id:"subscriptionidforrecordzoneid",children:[]},{value:"<code>subscriptionIDForDatabaseSubscription()</code>",id:"subscriptionidfordatabasesubscription",children:[]},{value:"<code>subscribeForChangesInDatabase(completion:)</code>",id:"subscribeforchangesindatabasecompletion",children:[]},{value:"<code>subscribeForChanges(in:completion:)</code>",id:"subscribeforchangesincompletion",children:[]},{value:"<code>cancelSubscriptionForChangesInDatabase(completion:)</code>",id:"cancelsubscriptionforchangesindatabasecompletion",children:[]},{value:"<code>cancelSubscriptionForChanges(in:completion:)</code>",id:"cancelsubscriptionforchangesincompletion",children:[]}],l={toc:b};function s(e){var t=e.components,n=Object(a.a)(e,["components"]);return Object(i.b)("wrapper",Object(r.a)({},l,n,{components:t,mdxType:"MDXLayout"}),Object(i.b)("p",null,Object(i.b)("strong",{parentName:"p"},"EXTENSION")),Object(i.b)("h1",{id:"cloudkitsynchronizer"},Object(i.b)("inlineCode",{parentName:"h1"},"CloudKitSynchronizer")),Object(i.b)("pre",null,Object(i.b)("code",{parentName:"pre",className:"language-swift"},"extension CloudKitSynchronizer\n")),Object(i.b)("h3",{id:"subscriptionidforrecordzoneid"},Object(i.b)("inlineCode",{parentName:"h3"},"subscriptionID(forRecordZoneID:)")),Object(i.b)("pre",null,Object(i.b)("code",{parentName:"pre",className:"language-swift"},"@objc func subscriptionID(forRecordZoneID zoneID: CKRecordZone.ID) -> String?\n")),Object(i.b)("p",null,"Returns identifier for a registered ",Object(i.b)("inlineCode",{parentName:"p"},"CKSubscription")," to track changes."),Object(i.b)("ul",null,Object(i.b)("li",{parentName:"ul"},"Parameter zoneID: ",Object(i.b)("inlineCode",{parentName:"li"},"CKRecordZoneID")," that is being tracked with the subscription."),Object(i.b)("li",{parentName:"ul"},"Returns: Identifier of an existing ",Object(i.b)("inlineCode",{parentName:"li"},"CKSubscription")," for the record zone, if there is one.")),Object(i.b)("h4",{id:"parameters"},"Parameters"),Object(i.b)("table",null,Object(i.b)("thead",{parentName:"table"},Object(i.b)("tr",{parentName:"thead"},Object(i.b)("th",{parentName:"tr",align:null},"Name"),Object(i.b)("th",{parentName:"tr",align:null},"Description"))),Object(i.b)("tbody",{parentName:"table"},Object(i.b)("tr",{parentName:"tbody"},Object(i.b)("td",{parentName:"tr",align:null},"zoneID"),Object(i.b)("td",{parentName:"tr",align:null},Object(i.b)("inlineCode",{parentName:"td"},"CKRecordZoneID")," that is being tracked with the subscription.")))),Object(i.b)("h3",{id:"subscriptionidfordatabasesubscription"},Object(i.b)("inlineCode",{parentName:"h3"},"subscriptionIDForDatabaseSubscription()")),Object(i.b)("pre",null,Object(i.b)("code",{parentName:"pre",className:"language-swift"},"@objc func subscriptionIDForDatabaseSubscription() -> String?\n")),Object(i.b)("p",null,"Returns identifier for a registered ",Object(i.b)("inlineCode",{parentName:"p"},"CKSubscription")," to track changes in the synchronizer's database."),Object(i.b)("ul",null,Object(i.b)("li",{parentName:"ul"},"Returns: Identifier of an existing ",Object(i.b)("inlineCode",{parentName:"li"},"CKSubscription")," for this database, if there is one.")),Object(i.b)("h3",{id:"subscribeforchangesindatabasecompletion"},Object(i.b)("inlineCode",{parentName:"h3"},"subscribeForChangesInDatabase(completion:)")),Object(i.b)("pre",null,Object(i.b)("code",{parentName:"pre",className:"language-swift"},"@objc func subscribeForChangesInDatabase(completion: ((Error?)->())?)\n")),Object(i.b)("p",null,"  Creates a new database subscription with CloudKit so the application can receive notifications when new changes happen. The application is responsible for registering for remote notifications and initiating synchronization when a notification is received. @see ",Object(i.b)("inlineCode",{parentName:"p"},"CKSubscription")),Object(i.b)("p",null,"  -Parameter completion Block that will be called after subscription is created, with an optional error."),Object(i.b)("h4",{id:"parameters-1"},"Parameters"),Object(i.b)("table",null,Object(i.b)("thead",{parentName:"table"},Object(i.b)("tr",{parentName:"thead"},Object(i.b)("th",{parentName:"tr",align:null},"Name"),Object(i.b)("th",{parentName:"tr",align:null},"Description"))),Object(i.b)("tbody",{parentName:"table"},Object(i.b)("tr",{parentName:"tbody"},Object(i.b)("td",{parentName:"tr",align:null},"completion"),Object(i.b)("td",{parentName:"tr",align:null},"Block that will be called after subscription is created, with an optional error.")))),Object(i.b)("h3",{id:"subscribeforchangesincompletion"},Object(i.b)("inlineCode",{parentName:"h3"},"subscribeForChanges(in:completion:)")),Object(i.b)("pre",null,Object(i.b)("code",{parentName:"pre",className:"language-swift"},"@objc func subscribeForChanges(in zoneID: CKRecordZone.ID, completion: ((Error?)->())?)\n")),Object(i.b)("p",null,"Creates a new subscription with CloudKit so the application can receive notifications when new changes happen. The application is responsible for registering for remote notifications and initiating synchronization when a notification is received. @see ",Object(i.b)("inlineCode",{parentName:"p"},"CKSubscription")),Object(i.b)("ul",null,Object(i.b)("li",{parentName:"ul"},"Parameters:",Object(i.b)("ul",{parentName:"li"},Object(i.b)("li",{parentName:"ul"},"zoneID: ",Object(i.b)("inlineCode",{parentName:"li"},"CKRecordZoneID")," to track for changes"),Object(i.b)("li",{parentName:"ul"},"completion: Block that will be called after subscription is created, with an optional error.")))),Object(i.b)("h4",{id:"parameters-2"},"Parameters"),Object(i.b)("table",null,Object(i.b)("thead",{parentName:"table"},Object(i.b)("tr",{parentName:"thead"},Object(i.b)("th",{parentName:"tr",align:null},"Name"),Object(i.b)("th",{parentName:"tr",align:null},"Description"))),Object(i.b)("tbody",{parentName:"table"},Object(i.b)("tr",{parentName:"tbody"},Object(i.b)("td",{parentName:"tr",align:null},"zoneID"),Object(i.b)("td",{parentName:"tr",align:null},Object(i.b)("inlineCode",{parentName:"td"},"CKRecordZoneID")," to track for changes")),Object(i.b)("tr",{parentName:"tbody"},Object(i.b)("td",{parentName:"tr",align:null},"completion"),Object(i.b)("td",{parentName:"tr",align:null},"Block that will be called after subscription is created, with an optional error.")))),Object(i.b)("h3",{id:"cancelsubscriptionforchangesindatabasecompletion"},Object(i.b)("inlineCode",{parentName:"h3"},"cancelSubscriptionForChangesInDatabase(completion:)")),Object(i.b)("pre",null,Object(i.b)("code",{parentName:"pre",className:"language-swift"},"@objc func cancelSubscriptionForChangesInDatabase(completion: ((Error?)->())?)\n")),Object(i.b)("p",null,"  Delete existing database subscription to stop receiving notifications."),Object(i.b)("p",null,"  -Parameter completion Block that will be called after subscription is deleted, with an optional error."),Object(i.b)("h4",{id:"parameters-3"},"Parameters"),Object(i.b)("table",null,Object(i.b)("thead",{parentName:"table"},Object(i.b)("tr",{parentName:"thead"},Object(i.b)("th",{parentName:"tr",align:null},"Name"),Object(i.b)("th",{parentName:"tr",align:null},"Description"))),Object(i.b)("tbody",{parentName:"table"},Object(i.b)("tr",{parentName:"tbody"},Object(i.b)("td",{parentName:"tr",align:null},"completion"),Object(i.b)("td",{parentName:"tr",align:null},"Block that will be called after subscription is deleted, with an optional error.")))),Object(i.b)("h3",{id:"cancelsubscriptionforchangesincompletion"},Object(i.b)("inlineCode",{parentName:"h3"},"cancelSubscriptionForChanges(in:completion:)")),Object(i.b)("pre",null,Object(i.b)("code",{parentName:"pre",className:"language-swift"},"@objc func cancelSubscriptionForChanges(in zoneID: CKRecordZone.ID, completion: ((Error?)->())?)\n")),Object(i.b)("p",null,"Delete existing subscription to stop receiving notifications."),Object(i.b)("ul",null,Object(i.b)("li",{parentName:"ul"},"Parameters:",Object(i.b)("ul",{parentName:"li"},Object(i.b)("li",{parentName:"ul"},"zoneID: ",Object(i.b)("inlineCode",{parentName:"li"},"CKRecordZoneID")," to stop tracking for changes."),Object(i.b)("li",{parentName:"ul"},"completion: Block that will be called after subscription is deleted, with an optional error.")))),Object(i.b)("h4",{id:"parameters-4"},"Parameters"),Object(i.b)("table",null,Object(i.b)("thead",{parentName:"table"},Object(i.b)("tr",{parentName:"thead"},Object(i.b)("th",{parentName:"tr",align:null},"Name"),Object(i.b)("th",{parentName:"tr",align:null},"Description"))),Object(i.b)("tbody",{parentName:"table"},Object(i.b)("tr",{parentName:"tbody"},Object(i.b)("td",{parentName:"tr",align:null},"zoneID"),Object(i.b)("td",{parentName:"tr",align:null},Object(i.b)("inlineCode",{parentName:"td"},"CKRecordZoneID")," to stop tracking for changes.")),Object(i.b)("tr",{parentName:"tbody"},Object(i.b)("td",{parentName:"tr",align:null},"completion"),Object(i.b)("td",{parentName:"tr",align:null},"Block that will be called after subscription is deleted, with an optional error.")))))}s.isMDXComponent=!0},132:function(e,t,n){"use strict";n.d(t,"a",(function(){return p})),n.d(t,"b",(function(){return m}));var r=n(0),a=n.n(r);function i(e,t,n){return t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}function o(e,t){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(e);t&&(r=r.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),n.push.apply(n,r)}return n}function c(e){for(var t=1;t<arguments.length;t++){var n=null!=arguments[t]?arguments[t]:{};t%2?o(Object(n),!0).forEach((function(t){i(e,t,n[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):o(Object(n)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(n,t))}))}return e}function b(e,t){if(null==e)return{};var n,r,a=function(e,t){if(null==e)return{};var n,r,a={},i=Object.keys(e);for(r=0;r<i.length;r++)n=i[r],t.indexOf(n)>=0||(a[n]=e[n]);return a}(e,t);if(Object.getOwnPropertySymbols){var i=Object.getOwnPropertySymbols(e);for(r=0;r<i.length;r++)n=i[r],t.indexOf(n)>=0||Object.prototype.propertyIsEnumerable.call(e,n)&&(a[n]=e[n])}return a}var l=a.a.createContext({}),s=function(e){var t=a.a.useContext(l),n=t;return e&&(n="function"==typeof e?e(t):c(c({},t),e)),n},p=function(e){var t=s(e.components);return a.a.createElement(l.Provider,{value:t},e.children)},u={inlineCode:"code",wrapper:function(e){var t=e.children;return a.a.createElement(a.a.Fragment,{},t)}},d=a.a.forwardRef((function(e,t){var n=e.components,r=e.mdxType,i=e.originalType,o=e.parentName,l=b(e,["components","mdxType","originalType","parentName"]),p=s(n),d=r,m=p["".concat(o,".").concat(d)]||p[d]||u[d]||i;return n?a.a.createElement(m,c(c({ref:t},l),{},{components:n})):a.a.createElement(m,c({ref:t},l))}));function m(e,t){var n=arguments,r=t&&t.mdxType;if("string"==typeof e||r){var i=n.length,o=new Array(i);o[0]=d;var c={};for(var b in t)hasOwnProperty.call(t,b)&&(c[b]=t[b]);c.originalType=e,c.mdxType="string"==typeof e?e:r,o[1]=c;for(var l=2;l<i;l++)o[l]=n[l];return a.a.createElement.apply(null,o)}return a.a.createElement.apply(null,n)}d.displayName="MDXCreateElement"}}]);