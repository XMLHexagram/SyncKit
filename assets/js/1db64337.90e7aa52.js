(self.webpackChunkdocs_synckit=self.webpackChunkdocs_synckit||[]).push([[1372],{3905:function(e,n,t){"use strict";t.d(n,{Zo:function(){return p},kt:function(){return f}});var r=t(7294);function o(e,n,t){return n in e?Object.defineProperty(e,n,{value:t,enumerable:!0,configurable:!0,writable:!0}):e[n]=t,e}function a(e,n){var t=Object.keys(e);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(e);n&&(r=r.filter((function(n){return Object.getOwnPropertyDescriptor(e,n).enumerable}))),t.push.apply(t,r)}return t}function i(e){for(var n=1;n<arguments.length;n++){var t=null!=arguments[n]?arguments[n]:{};n%2?a(Object(t),!0).forEach((function(n){o(e,n,t[n])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(t)):a(Object(t)).forEach((function(n){Object.defineProperty(e,n,Object.getOwnPropertyDescriptor(t,n))}))}return e}function c(e,n){if(null==e)return{};var t,r,o=function(e,n){if(null==e)return{};var t,r,o={},a=Object.keys(e);for(r=0;r<a.length;r++)t=a[r],n.indexOf(t)>=0||(o[t]=e[t]);return o}(e,n);if(Object.getOwnPropertySymbols){var a=Object.getOwnPropertySymbols(e);for(r=0;r<a.length;r++)t=a[r],n.indexOf(t)>=0||Object.prototype.propertyIsEnumerable.call(e,t)&&(o[t]=e[t])}return o}var l=r.createContext({}),u=function(e){var n=r.useContext(l),t=n;return e&&(t="function"==typeof e?e(n):i(i({},n),e)),t},p=function(e){var n=u(e.components);return r.createElement(l.Provider,{value:n},e.children)},s={inlineCode:"code",wrapper:function(e){var n=e.children;return r.createElement(r.Fragment,{},n)}},y=r.forwardRef((function(e,n){var t=e.components,o=e.mdxType,a=e.originalType,l=e.parentName,p=c(e,["components","mdxType","originalType","parentName"]),y=u(t),f=o,d=y["".concat(l,".").concat(f)]||y[f]||s[f]||a;return t?r.createElement(d,i(i({ref:n},p),{},{components:t})):r.createElement(d,i({ref:n},p))}));function f(e,n){var t=arguments,o=n&&n.mdxType;if("string"==typeof e||o){var a=t.length,i=new Array(a);i[0]=y;var c={};for(var l in n)hasOwnProperty.call(n,l)&&(c[l]=n[l]);c.originalType=e,c.mdxType="string"==typeof e?e:o,i[1]=c;for(var u=2;u<a;u++)i[u]=t[u];return r.createElement.apply(null,i)}return r.createElement.apply(null,t)}y.displayName="MDXCreateElement"},3099:function(e,n,t){"use strict";t.r(n),t.d(n,{frontMatter:function(){return c},contentTitle:function(){return l},metadata:function(){return u},toc:function(){return p},default:function(){return y}});var r=t(2122),o=t(9756),a=(t(7294),t(3905)),i=["components"],c={id:"overview",title:"Overview"},l="Overview",u={unversionedId:"overview",id:"overview",isDocsHomePage:!1,title:"Overview",description:"In most cases you just need to create a CloudKitSynchronizer instance using the convenience initializer for the model technology that your app uses. In a Core Data app you would do:",source:"@site/docs/overview.md",sourceDirName:".",slug:"/overview",permalink:"/SyncKit/overview",version:"current",frontMatter:{id:"overview",title:"Overview"},sidebar:"docs",previous:{title:"Example app",permalink:"/SyncKit/example"},next:{title:"SyncKit for Core Data",permalink:"/SyncKit/coredata"}},p=[],s={toc:p};function y(e){var n=e.components,t=(0,o.Z)(e,i);return(0,a.kt)("wrapper",(0,r.Z)({},s,t,{components:n,mdxType:"MDXLayout"}),(0,a.kt)("h1",{id:"overview"},"Overview"),(0,a.kt)("p",null,"In most cases you just need to create a ",(0,a.kt)("inlineCode",{parentName:"p"},"CloudKitSynchronizer")," instance using the convenience initializer for the model technology that your app uses. In a Core Data app you would do:"),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-swift"},'let synchronizer = \n  CloudKitSynchronizer.privateSynchronizer(containerName: "your-iCloud-container", \n                                           managedObjectContext: self.managedObjectContext)\n')),(0,a.kt)("p",null,"And in a Realm app you would use:"),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-swift"},'let synchronizer = \n  CloudKitSynchronizer.privateSynchronizer(containerName: "your-iCloud-container", \n                                           configuration: self.realmConfiguration)\n')),(0,a.kt)("p",null,"Internally, SyncKit will configure a model adapter for your model to track any changes that need to be sent to iCloud. Then you would simply call ",(0,a.kt)("inlineCode",{parentName:"p"},"synchronize")," to trigger a CloudKit sync."),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-swift"},"synchronizer.synchronize { error in\n\n}\n")),(0,a.kt)("p",null,"And that's it. Some further configuration might be needed for your technology, so do check the ",(0,a.kt)("a",{parentName:"p",href:"/SyncKit/coredata"},"Core Data")," and ",(0,a.kt)("a",{parentName:"p",href:"/SyncKit/realm"},"Realm")," sections."))}y.isMDXComponent=!0}}]);