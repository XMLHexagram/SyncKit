(window.webpackJsonp=window.webpackJsonp||[]).push([[51],{121:function(e,t,r){"use strict";r.r(t),r.d(t,"frontMatter",(function(){return c})),r.d(t,"metadata",(function(){return l})),r.d(t,"toc",(function(){return s})),r.d(t,"default",(function(){return u}));var a=r(3),n=r(7),o=(r(0),r(132)),c={},l={unversionedId:"CoreDataAPI/classes/CoreDataMultiFetchedResultsController",id:"CoreDataAPI/classes/CoreDataMultiFetchedResultsController",isDocsHomePage:!1,title:"CoreDataMultiFetchedResultsController",description:"CLASS",source:"@site/docs/CoreDataAPI/classes/CoreDataMultiFetchedResultsController.md",slug:"/CoreDataAPI/classes/CoreDataMultiFetchedResultsController",permalink:"/SyncKit/CoreDataAPI/classes/CoreDataMultiFetchedResultsController",editUrl:"https://github.com/facebook/docusaurus/edit/master/website/docs/CoreDataAPI/classes/CoreDataMultiFetchedResultsController.md",version:"current",sidebar:"api",previous:{title:"DefaultCoreDataAdapterProvider",permalink:"/SyncKit/CoreDataAPI/classes/DefaultCoreDataAdapterProvider"},next:{title:"DefaultCoreDataAdapterDelegate",permalink:"/SyncKit/CoreDataAPI/classes/DefaultCoreDataAdapterDelegate"}},s=[{value:"Properties",id:"properties",children:[{value:"<code>delegate</code>",id:"delegate",children:[]},{value:"<code>fetchedResultsControllers</code>",id:"fetchedresultscontrollers",children:[]},{value:"<code>fetchRequest</code>",id:"fetchrequest",children:[]},{value:"<code>provider</code>",id:"provider",children:[]}]},{value:"Methods",id:"methods",children:[{value:"<code>init(stackProvider:fetchRequest:)</code>",id:"initstackproviderfetchrequest",children:[]}]}],i={toc:s};function u(e){var t=e.components,r=Object(n.a)(e,["components"]);return Object(o.b)("wrapper",Object(a.a)({},i,r,{components:t,mdxType:"MDXLayout"}),Object(o.b)("p",null,Object(o.b)("strong",{parentName:"p"},"CLASS")),Object(o.b)("h1",{id:"coredatamultifetchedresultscontroller"},Object(o.b)("inlineCode",{parentName:"h1"},"CoreDataMultiFetchedResultsController")),Object(o.b)("pre",null,Object(o.b)("code",{parentName:"pre",className:"language-swift"},"@objc public class CoreDataMultiFetchedResultsController: NSObject\n")),Object(o.b)("p",null,"A ",Object(o.b)("inlineCode",{parentName:"p"},"CoreDataMultiFetchedResultsController")," allows to fetch objects with a fetch request across multiple ",Object(o.b)("inlineCode",{parentName:"p"},"NSManagedObjectContext")," instances.\nIt can be useful when getting results out of a shared synchronizer, since objects from different record zones will be kept in different Core Data contexts."),Object(o.b)("h2",{id:"properties"},"Properties"),Object(o.b)("h3",{id:"delegate"},Object(o.b)("inlineCode",{parentName:"h3"},"delegate")),Object(o.b)("pre",null,Object(o.b)("code",{parentName:"pre",className:"language-swift"},"@objc public weak var delegate: CoreDataMultiFetchedResultsControllerDelegate?\n")),Object(o.b)("p",null,"A delegate to be called when the internal controllers change as a result of new shared being accepted/removed."),Object(o.b)("h3",{id:"fetchedresultscontrollers"},Object(o.b)("inlineCode",{parentName:"h3"},"fetchedResultsControllers")),Object(o.b)("pre",null,Object(o.b)("code",{parentName:"pre",className:"language-swift"},"@objc public private(set) var fetchedResultsControllers: [NSFetchedResultsController<NSFetchRequestResult>]!\n")),Object(o.b)("p",null,"List of ",Object(o.b)("inlineCode",{parentName:"p"},"NSFetchedResultsController")," used to get the results."),Object(o.b)("h3",{id:"fetchrequest"},Object(o.b)("inlineCode",{parentName:"h3"},"fetchRequest")),Object(o.b)("pre",null,Object(o.b)("code",{parentName:"pre",className:"language-swift"},"@objc public let fetchRequest: NSFetchRequest<NSFetchRequestResult>\n")),Object(o.b)("p",null,"Fetch request used to get the results."),Object(o.b)("h3",{id:"provider"},Object(o.b)("inlineCode",{parentName:"h3"},"provider")),Object(o.b)("pre",null,Object(o.b)("code",{parentName:"pre",className:"language-swift"},"@objc public let provider: DefaultCoreDataStackProvider\n")),Object(o.b)("p",null,Object(o.b)("inlineCode",{parentName:"p"},"DefaultCoreDataStackProvider")," linked to this controller. This is the object that provides a new Core Data stack to the synchronizer when a new record zone is added to it \u2013user accepted a share, for example."),Object(o.b)("h2",{id:"methods"},"Methods"),Object(o.b)("h3",{id:"initstackproviderfetchrequest"},Object(o.b)("inlineCode",{parentName:"h3"},"init(stackProvider:fetchRequest:)")),Object(o.b)("pre",null,Object(o.b)("code",{parentName:"pre",className:"language-swift"},"@objc public init(stackProvider: DefaultCoreDataStackProvider, fetchRequest: NSFetchRequest<NSFetchRequestResult>)\n")),Object(o.b)("p",null,"Createa a new controller with results from the contexts in the given stack provider."),Object(o.b)("ul",null,Object(o.b)("li",{parentName:"ul"},"Parameters:",Object(o.b)("ul",{parentName:"li"},Object(o.b)("li",{parentName:"ul"},"stackProvider: The Core Data stack provider that contains the contexts to get results from."),Object(o.b)("li",{parentName:"ul"},"fetchRequest: Fetch request to use to with Core Data to get the objects.")))),Object(o.b)("h4",{id:"parameters"},"Parameters"),Object(o.b)("table",null,Object(o.b)("thead",{parentName:"table"},Object(o.b)("tr",{parentName:"thead"},Object(o.b)("th",{parentName:"tr",align:null},"Name"),Object(o.b)("th",{parentName:"tr",align:null},"Description"))),Object(o.b)("tbody",{parentName:"table"},Object(o.b)("tr",{parentName:"tbody"},Object(o.b)("td",{parentName:"tr",align:null},"stackProvider"),Object(o.b)("td",{parentName:"tr",align:null},"The Core Data stack provider that contains the contexts to get results from.")),Object(o.b)("tr",{parentName:"tbody"},Object(o.b)("td",{parentName:"tr",align:null},"fetchRequest"),Object(o.b)("td",{parentName:"tr",align:null},"Fetch request to use to with Core Data to get the objects.")))))}u.isMDXComponent=!0},132:function(e,t,r){"use strict";r.d(t,"a",(function(){return b})),r.d(t,"b",(function(){return h}));var a=r(0),n=r.n(a);function o(e,t,r){return t in e?Object.defineProperty(e,t,{value:r,enumerable:!0,configurable:!0,writable:!0}):e[t]=r,e}function c(e,t){var r=Object.keys(e);if(Object.getOwnPropertySymbols){var a=Object.getOwnPropertySymbols(e);t&&(a=a.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),r.push.apply(r,a)}return r}function l(e){for(var t=1;t<arguments.length;t++){var r=null!=arguments[t]?arguments[t]:{};t%2?c(Object(r),!0).forEach((function(t){o(e,t,r[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(r)):c(Object(r)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(r,t))}))}return e}function s(e,t){if(null==e)return{};var r,a,n=function(e,t){if(null==e)return{};var r,a,n={},o=Object.keys(e);for(a=0;a<o.length;a++)r=o[a],t.indexOf(r)>=0||(n[r]=e[r]);return n}(e,t);if(Object.getOwnPropertySymbols){var o=Object.getOwnPropertySymbols(e);for(a=0;a<o.length;a++)r=o[a],t.indexOf(r)>=0||Object.prototype.propertyIsEnumerable.call(e,r)&&(n[r]=e[r])}return n}var i=n.a.createContext({}),u=function(e){var t=n.a.useContext(i),r=t;return e&&(r="function"==typeof e?e(t):l(l({},t),e)),r},b=function(e){var t=u(e.components);return n.a.createElement(i.Provider,{value:t},e.children)},d={inlineCode:"code",wrapper:function(e){var t=e.children;return n.a.createElement(n.a.Fragment,{},t)}},p=n.a.forwardRef((function(e,t){var r=e.components,a=e.mdxType,o=e.originalType,c=e.parentName,i=s(e,["components","mdxType","originalType","parentName"]),b=u(r),p=a,h=b["".concat(c,".").concat(p)]||b[p]||d[p]||o;return r?n.a.createElement(h,l(l({ref:t},i),{},{components:r})):n.a.createElement(h,l({ref:t},i))}));function h(e,t){var r=arguments,a=t&&t.mdxType;if("string"==typeof e||a){var o=r.length,c=new Array(o);c[0]=p;var l={};for(var s in t)hasOwnProperty.call(t,s)&&(l[s]=t[s]);l.originalType=e,l.mdxType="string"==typeof e?e:a,c[1]=l;for(var i=2;i<o;i++)c[i]=r[i];return n.a.createElement.apply(null,c)}return n.a.createElement.apply(null,r)}p.displayName="MDXCreateElement"}}]);