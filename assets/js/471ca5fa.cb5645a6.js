(self.webpackChunkdocs_synckit=self.webpackChunkdocs_synckit||[]).push([[6794],{3905:function(e,t,n){"use strict";n.d(t,{Zo:function(){return u},kt:function(){return h}});var r=n(7294);function a(e,t,n){return t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}function i(e,t){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(e);t&&(r=r.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),n.push.apply(n,r)}return n}function o(e){for(var t=1;t<arguments.length;t++){var n=null!=arguments[t]?arguments[t]:{};t%2?i(Object(n),!0).forEach((function(t){a(e,t,n[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):i(Object(n)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(n,t))}))}return e}function l(e,t){if(null==e)return{};var n,r,a=function(e,t){if(null==e)return{};var n,r,a={},i=Object.keys(e);for(r=0;r<i.length;r++)n=i[r],t.indexOf(n)>=0||(a[n]=e[n]);return a}(e,t);if(Object.getOwnPropertySymbols){var i=Object.getOwnPropertySymbols(e);for(r=0;r<i.length;r++)n=i[r],t.indexOf(n)>=0||Object.prototype.propertyIsEnumerable.call(e,n)&&(a[n]=e[n])}return a}var c=r.createContext({}),s=function(e){var t=r.useContext(c),n=t;return e&&(n="function"==typeof e?e(t):o(o({},t),e)),n},u=function(e){var t=s(e.components);return r.createElement(c.Provider,{value:t},e.children)},d={inlineCode:"code",wrapper:function(e){var t=e.children;return r.createElement(r.Fragment,{},t)}},p=r.forwardRef((function(e,t){var n=e.components,a=e.mdxType,i=e.originalType,c=e.parentName,u=l(e,["components","mdxType","originalType","parentName"]),p=s(n),h=a,m=p["".concat(c,".").concat(h)]||p[h]||d[h]||i;return n?r.createElement(m,o(o({ref:t},u),{},{components:n})):r.createElement(m,o({ref:t},u))}));function h(e,t){var n=arguments,a=t&&t.mdxType;if("string"==typeof e||a){var i=n.length,o=new Array(i);o[0]=p;var l={};for(var c in t)hasOwnProperty.call(t,c)&&(l[c]=t[c]);l.originalType=e,l.mdxType="string"==typeof e?e:a,o[1]=l;for(var s=2;s<i;s++)o[s]=n[s];return r.createElement.apply(null,o)}return r.createElement.apply(null,n)}p.displayName="MDXCreateElement"},7687:function(e,t,n){"use strict";n.r(t),n.d(t,{frontMatter:function(){return l},contentTitle:function(){return c},metadata:function(){return s},toc:function(){return u},default:function(){return p}});var r=n(2122),a=n(9756),i=(n(7294),n(3905)),o=["components"],l={},c="MultiRealmCollectionChange",s={unversionedId:"api/realm/MultiRealmCollectionChange",id:"api/realm/MultiRealmCollectionChange",isDocsHomePage:!1,title:"MultiRealmCollectionChange",description:"` swift",source:"@site/docs/api/realm/MultiRealmCollectionChange.md",sourceDirName:"api/realm",slug:"/api/realm/MultiRealmCollectionChange",permalink:"/SyncKit/api/realm/MultiRealmCollectionChange",version:"current",frontMatter:{},sidebar:"API",previous:{title:"DefaultRealmProvider",permalink:"/SyncKit/api/realm/DefaultRealmProvider"},next:{title:"MultiRealmObserver",permalink:"/SyncKit/api/realm/MultiRealmObserver"}},u=[{value:"Enumeration Cases",id:"enumeration-cases",children:[{value:"<code>update</code>",id:"update",children:[]},{value:"<code>error</code>",id:"error",children:[]},{value:"<code>update</code>",id:"update-1",children:[]},{value:"<code>error</code>",id:"error-1",children:[]}]}],d={toc:u};function p(e){var t=e.components,n=(0,a.Z)(e,o);return(0,i.kt)("wrapper",(0,r.Z)({},d,n,{components:t,mdxType:"MDXLayout"}),(0,i.kt)("h1",{id:"multirealmcollectionchange"},"MultiRealmCollectionChange"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-swift"},"public enum MultiRealmCollectionChange \n")),(0,i.kt)("h2",{id:"enumeration-cases"},"Enumeration Cases"),(0,i.kt)("h3",{id:"update"},(0,i.kt)("inlineCode",{parentName:"h3"},"update")),(0,i.kt)("p",null,(0,i.kt)("inlineCode",{parentName:"p"},".update")," indicates that a write transaction has been committed which\neither changed which objects are in the collection, and/or modified one\nor more of the objects in the collection."),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-swift"},"case update(realmCount: Int, deletions: [IndexPath], insertions: [IndexPath], modifications: [IndexPath])\n")),(0,i.kt)("p",null,"All three of the change arrays are always sorted in ascending order."),(0,i.kt)("h4",{id:"parameters"},"Parameters"),(0,i.kt)("ul",null,(0,i.kt)("li",{parentName:"ul"},"deletions: The indices in the previous version of the collection which were removed from this one."),(0,i.kt)("li",{parentName:"ul"},"insertions: The indices in the new collection which were added in this version."),(0,i.kt)("li",{parentName:"ul"},"modifications: The indices of the objects in the new collection which were modified in this version.")),(0,i.kt)("h3",{id:"error"},(0,i.kt)("inlineCode",{parentName:"h3"},"error")),(0,i.kt)("p",null,"If an error occurs, notification blocks are called one time with a ",(0,i.kt)("inlineCode",{parentName:"p"},".error"),"\nresult and an ",(0,i.kt)("inlineCode",{parentName:"p"},"NSError")," containing details about the error. This can only\ncurrently happen if opening the Realm on a background thread to calcuate\nthe change set fails. The callback will never be called again after it is\ninvoked with a .error value."),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-swift"},"case error(Error)\n")),(0,i.kt)("h3",{id:"update-1"},(0,i.kt)("inlineCode",{parentName:"h3"},"update")),(0,i.kt)("p",null,(0,i.kt)("inlineCode",{parentName:"p"},".update")," indicates that a write transaction has been committed which\neither changed which objects are in the collection, and/or modified one\nor more of the objects in the collection."),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-swift"},"case update(realmCount: Int, deletions: [IndexPath], insertions: [IndexPath], modifications: [IndexPath])\n")),(0,i.kt)("p",null,"All three of the change arrays are always sorted in ascending order."),(0,i.kt)("h4",{id:"parameters-1"},"Parameters"),(0,i.kt)("ul",null,(0,i.kt)("li",{parentName:"ul"},"deletions: The indices in the previous version of the collection which were removed from this one."),(0,i.kt)("li",{parentName:"ul"},"insertions: The indices in the new collection which were added in this version."),(0,i.kt)("li",{parentName:"ul"},"modifications: The indices of the objects in the new collection which were modified in this version.")),(0,i.kt)("h3",{id:"error-1"},(0,i.kt)("inlineCode",{parentName:"h3"},"error")),(0,i.kt)("p",null,"If an error occurs, notification blocks are called one time with a ",(0,i.kt)("inlineCode",{parentName:"p"},".error"),"\nresult and an ",(0,i.kt)("inlineCode",{parentName:"p"},"NSError")," containing details about the error. This can only\ncurrently happen if opening the Realm on a background thread to calcuate\nthe change set fails. The callback will never be called again after it is\ninvoked with a .error value."),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-swift"},"case error(Error)\n")))}p.isMDXComponent=!0}}]);