(window.webpackJsonp=window.webpackJsonp||[]).push([[14],{132:function(e,n,t){"use strict";t.d(n,"a",(function(){return s})),t.d(n,"b",(function(){return f}));var r=t(0),o=t.n(r);function a(e,n,t){return n in e?Object.defineProperty(e,n,{value:t,enumerable:!0,configurable:!0,writable:!0}):e[n]=t,e}function i(e,n){var t=Object.keys(e);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(e);n&&(r=r.filter((function(n){return Object.getOwnPropertyDescriptor(e,n).enumerable}))),t.push.apply(t,r)}return t}function c(e){for(var n=1;n<arguments.length;n++){var t=null!=arguments[n]?arguments[n]:{};n%2?i(Object(t),!0).forEach((function(n){a(e,n,t[n])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(t)):i(Object(t)).forEach((function(n){Object.defineProperty(e,n,Object.getOwnPropertyDescriptor(t,n))}))}return e}function l(e,n){if(null==e)return{};var t,r,o=function(e,n){if(null==e)return{};var t,r,o={},a=Object.keys(e);for(r=0;r<a.length;r++)t=a[r],n.indexOf(t)>=0||(o[t]=e[t]);return o}(e,n);if(Object.getOwnPropertySymbols){var a=Object.getOwnPropertySymbols(e);for(r=0;r<a.length;r++)t=a[r],n.indexOf(t)>=0||Object.prototype.propertyIsEnumerable.call(e,t)&&(o[t]=e[t])}return o}var u=o.a.createContext({}),p=function(e){var n=o.a.useContext(u),t=n;return e&&(t="function"==typeof e?e(n):c(c({},n),e)),t},s=function(e){var n=p(e.components);return o.a.createElement(u.Provider,{value:n},e.children)},d={inlineCode:"code",wrapper:function(e){var n=e.children;return o.a.createElement(o.a.Fragment,{},n)}},y=o.a.forwardRef((function(e,n){var t=e.components,r=e.mdxType,a=e.originalType,i=e.parentName,u=l(e,["components","mdxType","originalType","parentName"]),s=p(t),y=r,f=s["".concat(i,".").concat(y)]||s[y]||d[y]||a;return t?o.a.createElement(f,c(c({ref:n},u),{},{components:t})):o.a.createElement(f,c({ref:n},u))}));function f(e,n){var t=arguments,r=n&&n.mdxType;if("string"==typeof e||r){var a=t.length,i=new Array(a);i[0]=y;var c={};for(var l in n)hasOwnProperty.call(n,l)&&(c[l]=n[l]);c.originalType=e,c.mdxType="string"==typeof e?e:r,i[1]=c;for(var u=2;u<a;u++)i[u]=t[u];return o.a.createElement.apply(null,i)}return o.a.createElement.apply(null,t)}y.displayName="MDXCreateElement"},82:function(e,n,t){"use strict";t.r(n),t.d(n,"frontMatter",(function(){return i})),t.d(n,"metadata",(function(){return c})),t.d(n,"toc",(function(){return l})),t.d(n,"default",(function(){return p}));var r=t(3),o=t(7),a=(t(0),t(132)),i={id:"overview",title:"Overview"},c={unversionedId:"overview",id:"overview",isDocsHomePage:!1,title:"Overview",description:"In most cases you just need to create a CloudKitSynchronizer instance using the convenience initializer for the model technology that your app uses.",source:"@site/docs/overview.md",slug:"/overview",permalink:"/SyncKit/overview",version:"current",sidebar:"docs",previous:{title:"Example app",permalink:"/SyncKit/example"},next:{title:"SyncKit for Core Data",permalink:"/SyncKit/coredata"}},l=[],u={toc:l};function p(e){var n=e.components,t=Object(o.a)(e,["components"]);return Object(a.b)("wrapper",Object(r.a)({},u,t,{components:n,mdxType:"MDXLayout"}),Object(a.b)("p",null,"In most cases you just need to create a ",Object(a.b)("inlineCode",{parentName:"p"},"CloudKitSynchronizer")," instance using the convenience initializer for the model technology that your app uses.\nIn a Core Data app you would do:"),Object(a.b)("pre",null,Object(a.b)("code",{parentName:"pre",className:"language-swift"},'let synchronizer = \n  CloudKitSynchronizer.privateSynchronizer(containerName: "your-iCloud-container", \n                                           managedObjectContext: self.managedObjectContext)\n')),Object(a.b)("p",null,"And in a Realm app you would use:"),Object(a.b)("pre",null,Object(a.b)("code",{parentName:"pre",className:"language-swift"},'let synchronizer = \n  CloudKitSynchronizer.privateSynchronizer(containerName: "your-iCloud-container", \n                                           configuration: self.realmConfiguration)\n')),Object(a.b)("p",null,"Internally, SyncKit will configure a model adapter for your model to track any changes that need to be sent to iCloud. Then you would simply call ",Object(a.b)("inlineCode",{parentName:"p"},"synchronize")," to trigger a CloudKit sync."),Object(a.b)("pre",null,Object(a.b)("code",{parentName:"pre",className:"language-swift"},"synchronizer.synchronize { error in\n\n}\n")),Object(a.b)("p",null,"And that's it. Some further configuration might be needed for your technology, so do check the ",Object(a.b)("a",{parentName:"p",href:"coreData"},"Core Data")," and ",Object(a.b)("a",{parentName:"p",href:"realm"},"Realm")," sections."))}p.isMDXComponent=!0}}]);