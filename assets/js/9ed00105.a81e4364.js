(window.webpackJsonp=window.webpackJsonp||[]).push([[46],{114:function(e,t,n){"use strict";n.r(t),n.d(t,"frontMatter",(function(){return i})),n.d(t,"metadata",(function(){return c})),n.d(t,"toc",(function(){return l})),n.d(t,"default",(function(){return p}));var r=n(3),o=n(7),a=(n(0),n(132)),i={id:"configuration",title:"Configuration"},c={unversionedId:"configuration",id:"configuration",isDocsHomePage:!1,title:"Configuration",description:"Record Zone ID",source:"@site/docs/configuration.md",slug:"/configuration",permalink:"/SyncKit/configuration",version:"current",sidebar:"docs",previous:{title:"SyncKit for Realm",permalink:"/SyncKit/realm"},next:{title:"Sharing",permalink:"/SyncKit/sharing"}},l=[{value:"Record Zone ID",id:"record-zone-id",children:[]},{value:"When to sync",id:"when-to-sync",children:[]},{value:"CloudKit subscription",id:"cloudkit-subscription",children:[]},{value:"Other notifications",id:"other-notifications",children:[]},{value:"Sync",id:"sync",children:[]},{value:"Model compatibility",id:"model-compatibility",children:[]},{value:"Batch size",id:"batch-size",children:[]},{value:"Adapter configuration",id:"adapter-configuration",children:[{value:"Merge policy",id:"merge-policy",children:[]},{value:"Custom record processing",id:"custom-record-processing",children:[]},{value:"CKAsset as Data",id:"ckasset-as-data",children:[]},{value:"hasChanges",id:"haschanges",children:[]}]}],s={toc:l};function p(e){var t=e.components,n=Object(o.a)(e,["components"]);return Object(a.b)("wrapper",Object(r.a)({},s,n,{components:t,mdxType:"MDXLayout"}),Object(a.b)("h3",{id:"record-zone-id"},"Record Zone ID"),Object(a.b)("p",null,"In the case of the private synchronizer you can optionally specify the name of the CloudKit record zone to use for synchronization. Otherwise the default will be used:"),Object(a.b)("pre",null,Object(a.b)("code",{parentName:"pre",className:"language-swift"},'CKRecordZone.ID(zoneName: "QSCloudKitCustomZoneName", ownerName: CKCurrentUserDefaultName)\n')),Object(a.b)("h3",{id:"when-to-sync"},"When to sync"),Object(a.b)("p",null,"A common question is when to trigger a new sync process. Model adapters will post the ",Object(a.b)("inlineCode",{parentName:"p"},"ModelAdapterHasChangesNotification")," notification when they detect new changes, so one option is to listen for that to either trigger the sync automatically or to update some UI element to let the user know, in case your app lets the user initiate the sync."),Object(a.b)("p",null,'This notification is posted only once, when the model adapter goes from "synced" to "changed", rather than for every change that happens.'),Object(a.b)("h3",{id:"cloudkit-subscription"},"CloudKit subscription"),Object(a.b)("p",null,"CloudKit supports push notifications to let your app know when changes have been uploaded from another device. You can subscribe for changes in a database:"),Object(a.b)("pre",null,Object(a.b)("code",{parentName:"pre",className:"language-swift"},"synchronizer.subscribeForChangesInDatabase { error in\n  // subscribed\n}\n")),Object(a.b)("p",null,"Both the private and shared databases support database subscriptions."),Object(a.b)("p",null,"You can also subscribe for changes in a record zone:"),Object(a.b)("pre",null,Object(a.b)("code",{parentName:"pre",className:"language-swift"},"if let adapter = synchronizer.modelAdapters.first {\n  synchronizer.subscribeForChanges(in: adapter.recordZoneID) { error in\n    // subscribed\n  }\n}\n")),Object(a.b)("p",null,"Only the private database supports record zone subscriptions."),Object(a.b)("p",null,"According to Apple you do not need to explicitly enable the Push Notification capability for your app, but you do need to register for remote notifications in your app:"),Object(a.b)("pre",null,Object(a.b)("code",{parentName:"pre",className:"language-swift"},"func application(_ application: UIApplication,\n           didFinishLaunchingWithOptions launchOptions:\n           [UIApplicationLaunchOptionsKey: Any]?) -> Bool {\n   // Override point for customization after application launch.\n               \n   UIApplication.shared.registerForRemoteNotifications()\n   return true\n}\n\nfunc application(_ application: UIApplication, didReceiveRemoteNotification userInfo: [AnyHashable : Any]) {\n  // Do something here, or use the newer UNUserNotificationCenterDelegate methods\n}\n")),Object(a.b)("p",null,"For more information see the ",Object(a.b)("a",{parentName:"p",href:"https://developer.apple.com/documentation/cloudkit/ckrecordzonesubscription"},"Apple documentation")),Object(a.b)("h3",{id:"other-notifications"},"Other notifications"),Object(a.b)("p",null,Object(a.b)("inlineCode",{parentName:"p"},"CloudKitSynchronizer")," also posts ",Object(a.b)("a",{parentName:"p",href:"Core/classes/CloudKitSynchronizer#notifications"},"other notifications")," when it's syncing."),Object(a.b)("h3",{id:"sync"},"Sync"),Object(a.b)("p",null,"Only one sync process can be active at the same time. If you call ",Object(a.b)("inlineCode",{parentName:"p"},"synchronize")," while ",Object(a.b)("inlineCode",{parentName:"p"},"CloudKitSynchronizer")," is already doing so you will receive an ",Object(a.b)("inlineCode",{parentName:"p"},"alreadySyncing")," ",Object(a.b)("a",{parentName:"p",href:"Core/enums/CloudKitSynchronizer.SyncError"},"error"),"."),Object(a.b)("h3",{id:"model-compatibility"},"Model compatibility"),Object(a.b)("p",null,"If you create a new version of your Core Data or Realm model you might want to avoid versions of your app running older versions of the model to get any records that were created under the new model. For that, you can use:"),Object(a.b)("pre",null,Object(a.b)("code",{parentName:"pre",className:"language-swift"},"public var compatibilityVersion: Int\n")),Object(a.b)("p",null,"When a new model version is created, you can increase the ",Object(a.b)("inlineCode",{parentName:"p"},"compatibilityVersion")," on the synchronizer. If a synchronizer receives a record from CloudKit that was created by a newer version, the sync process will terminate with a ",Object(a.b)("inlineCode",{parentName:"p"},"higherModelVersionFound")," error. Do note that the opposite is not true, newer versions of your app might still receive records created by the older version, if the user upgraded the app while it was not fully synced, for example."),Object(a.b)("h3",{id:"batch-size"},"Batch size"),Object(a.b)("p",null,"By default ",Object(a.b)("inlineCode",{parentName:"p"},"CloudKitSynchronizer")," will use a batch size of 200. You can change that number using:"),Object(a.b)("pre",null,Object(a.b)("code",{parentName:"pre",className:"language-swift"},"public var batchSize: Int\n")),Object(a.b)("p",null,"Regardless of the initial value, if ",Object(a.b)("inlineCode",{parentName:"p"},"CloudKitSynchronizer")," ever receives a ",Object(a.b)("inlineCode",{parentName:"p"},"CKError.Code.limitExceeded")," from CloudKit it will reduce the batch size for future operations."),Object(a.b)("h2",{id:"adapter-configuration"},"Adapter configuration"),Object(a.b)("p",null,"Model adapters are accessible via the ",Object(a.b)("inlineCode",{parentName:"p"},"modelAdapters")," property in ",Object(a.b)("inlineCode",{parentName:"p"},"CloudKitSynchronizer"),", and you can perform further customization on them if you need.\nA synchronizer for the private database will commonly only have one model adapter, but synchronizers for the shared database will have one model adapter for each record zone that was shared with this user."),Object(a.b)("h3",{id:"merge-policy"},"Merge policy"),Object(a.b)("p",null,"Server, local or custom policies are ",Object(a.b)("a",{parentName:"p",href:"Core/enums/MergePolicy"},"available")),Object(a.b)("p",null,"A custom merge policy is possible by providing a conflict resolution delegate to the model adapter. ",Object(a.b)("a",{parentName:"p",href:"CoreDataAPI/protocols/CoreDataAdapterConflictResolutionDelegate"},"Core Data"),", ",Object(a.b)("a",{parentName:"p",href:"RealmSwiftAPI/protocols/RealmSwiftAdapterDelegate"},"Realm")),Object(a.b)("h3",{id:"custom-record-processing"},"Custom record processing"),Object(a.b)("p",null,"It is possible for your app to customize the way records are created and handled by providing a record processing delegate to your model adapter.\nThis will let you do things like:"),Object(a.b)("ul",null,Object(a.b)("li",{parentName:"ul"},"Remove specific fields from your records before they're sent to CloudKit."),Object(a.b)("li",{parentName:"ul"},"Read and write files from the file system to send them as CKAssets, if your model contains references to files in the file system rather than the data itself.")),Object(a.b)("p",null,Object(a.b)("a",{parentName:"p",href:"CoreDataAPI/protocols/CoreDataAdapterRecordProcessing"},"Core Data"),"\n",Object(a.b)("a",{parentName:"p",href:"RealmSwiftAPI/protocols/RealmSwiftAdapterRecordProcessing"},"Realm")),Object(a.b)("h3",{id:"ckasset-as-data"},"CKAsset as Data"),Object(a.b)("p",null,"By default ",Object(a.b)("inlineCode",{parentName:"p"},"Data")," properties are uploaded using ",Object(a.b)("inlineCode",{parentName:"p"},"CKAsset"),", but you can force the use of ",Object(a.b)("inlineCode",{parentName:"p"},"Data")," by setting:"),Object(a.b)("pre",null,Object(a.b)("code",{parentName:"pre",className:"language-swift"},"public var forceDataTypeInsteadOfAsset: Bool\n")),Object(a.b)("h3",{id:"haschanges"},"hasChanges"),Object(a.b)("p",null,"Model adapters also have a ",Object(a.b)("inlineCode",{parentName:"p"},"hasChanges")," property that you can check to tell if there are any changes that have not been uploaded to iCloud yet."))}p.isMDXComponent=!0},132:function(e,t,n){"use strict";n.d(t,"a",(function(){return d})),n.d(t,"b",(function(){return h}));var r=n(0),o=n.n(r);function a(e,t,n){return t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}function i(e,t){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(e);t&&(r=r.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),n.push.apply(n,r)}return n}function c(e){for(var t=1;t<arguments.length;t++){var n=null!=arguments[t]?arguments[t]:{};t%2?i(Object(n),!0).forEach((function(t){a(e,t,n[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):i(Object(n)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(n,t))}))}return e}function l(e,t){if(null==e)return{};var n,r,o=function(e,t){if(null==e)return{};var n,r,o={},a=Object.keys(e);for(r=0;r<a.length;r++)n=a[r],t.indexOf(n)>=0||(o[n]=e[n]);return o}(e,t);if(Object.getOwnPropertySymbols){var a=Object.getOwnPropertySymbols(e);for(r=0;r<a.length;r++)n=a[r],t.indexOf(n)>=0||Object.prototype.propertyIsEnumerable.call(e,n)&&(o[n]=e[n])}return o}var s=o.a.createContext({}),p=function(e){var t=o.a.useContext(s),n=t;return e&&(n="function"==typeof e?e(t):c(c({},t),e)),n},d=function(e){var t=p(e.components);return o.a.createElement(s.Provider,{value:t},e.children)},u={inlineCode:"code",wrapper:function(e){var t=e.children;return o.a.createElement(o.a.Fragment,{},t)}},b=o.a.forwardRef((function(e,t){var n=e.components,r=e.mdxType,a=e.originalType,i=e.parentName,s=l(e,["components","mdxType","originalType","parentName"]),d=p(n),b=r,h=d["".concat(i,".").concat(b)]||d[b]||u[b]||a;return n?o.a.createElement(h,c(c({ref:t},s),{},{components:n})):o.a.createElement(h,c({ref:t},s))}));function h(e,t){var n=arguments,r=t&&t.mdxType;if("string"==typeof e||r){var a=n.length,i=new Array(a);i[0]=b;var c={};for(var l in t)hasOwnProperty.call(t,l)&&(c[l]=t[l]);c.originalType=e,c.mdxType="string"==typeof e?e:r,i[1]=c;for(var s=2;s<a;s++)i[s]=n[s];return o.a.createElement.apply(null,i)}return o.a.createElement.apply(null,n)}b.displayName="MDXCreateElement"}}]);