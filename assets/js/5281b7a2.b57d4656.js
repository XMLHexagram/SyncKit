(self.webpackChunkdocs_synckit=self.webpackChunkdocs_synckit||[]).push([[5927],{3905:function(e,t,r){"use strict";r.d(t,{Zo:function(){return d},kt:function(){return f}});var n=r(7294);function a(e,t,r){return t in e?Object.defineProperty(e,t,{value:r,enumerable:!0,configurable:!0,writable:!0}):e[t]=r,e}function o(e,t){var r=Object.keys(e);if(Object.getOwnPropertySymbols){var n=Object.getOwnPropertySymbols(e);t&&(n=n.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),r.push.apply(r,n)}return r}function c(e){for(var t=1;t<arguments.length;t++){var r=null!=arguments[t]?arguments[t]:{};t%2?o(Object(r),!0).forEach((function(t){a(e,t,r[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(r)):o(Object(r)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(r,t))}))}return e}function i(e,t){if(null==e)return{};var r,n,a=function(e,t){if(null==e)return{};var r,n,a={},o=Object.keys(e);for(n=0;n<o.length;n++)r=o[n],t.indexOf(r)>=0||(a[r]=e[r]);return a}(e,t);if(Object.getOwnPropertySymbols){var o=Object.getOwnPropertySymbols(e);for(n=0;n<o.length;n++)r=o[n],t.indexOf(r)>=0||Object.prototype.propertyIsEnumerable.call(e,r)&&(a[r]=e[r])}return a}var s=n.createContext({}),u=function(e){var t=n.useContext(s),r=t;return e&&(r="function"==typeof e?e(t):c(c({},t),e)),r},d=function(e){var t=u(e.components);return n.createElement(s.Provider,{value:t},e.children)},l={inlineCode:"code",wrapper:function(e){var t=e.children;return n.createElement(n.Fragment,{},t)}},p=n.forwardRef((function(e,t){var r=e.components,a=e.mdxType,o=e.originalType,s=e.parentName,d=i(e,["components","mdxType","originalType","parentName"]),p=u(r),f=a,h=p["".concat(s,".").concat(f)]||p[f]||l[f]||o;return r?n.createElement(h,c(c({ref:t},d),{},{components:r})):n.createElement(h,c({ref:t},d))}));function f(e,t){var r=arguments,a=t&&t.mdxType;if("string"==typeof e||a){var o=r.length,c=new Array(o);c[0]=p;var i={};for(var s in t)hasOwnProperty.call(t,s)&&(i[s]=t[s]);i.originalType=e,i.mdxType="string"==typeof e?e:a,c[1]=i;for(var u=2;u<o;u++)c[u]=r[u];return n.createElement.apply(null,c)}return n.createElement.apply(null,r)}p.displayName="MDXCreateElement"},9870:function(e,t,r){"use strict";r.r(t),r.d(t,{frontMatter:function(){return i},contentTitle:function(){return s},metadata:function(){return u},toc:function(){return d},default:function(){return p}});var n=r(2122),a=r(9756),o=(r(7294),r(3905)),c=["components"],i={id:"architecture",title:"Architecture"},s=void 0,u={unversionedId:"architecture",id:"architecture",isDocsHomePage:!1,title:"Architecture",description:"Architecture",source:"@site/docs/architecture.md",sourceDirName:".",slug:"/architecture",permalink:"/architecture",version:"current",frontMatter:{id:"architecture",title:"Architecture"},sidebar:"docs",previous:{title:"Sharing",permalink:"/sharing"},next:{title:"FAQ",permalink:"/faq"}},d=[],l={toc:d};function p(e){var t=e.components,i=(0,a.Z)(e,c);return(0,o.kt)("wrapper",(0,n.Z)({},l,i,{components:t,mdxType:"MDXLayout"}),(0,o.kt)("p",null,(0,o.kt)("img",{alt:"Architecture",src:r(8198).Z})),(0,o.kt)("p",null,"A ",(0,o.kt)("inlineCode",{parentName:"p"},"QSCloudKitSynchronizer")," is configured with an identifier, a CloudKit container and a database (private or shared). It also may have a number of model adapter, each of those for a specific record zone."),(0,o.kt)("p",null,"The synchronizer asks its database for new changes, grouped by record zone, then it passes any downloaded CKRecord objects to the right model adapter, and the adapter takes care of translating the changes to actual model changes (Core Data or Realm). The model adapter also tracks local changes in the Core Data or Realm model layer so it can provide those changes in the form of CKRecords to be uploaded by the synchronizer."),(0,o.kt)("p",null,"If the synchronizer encounters changes in a record zone that it wasn't yet tracking it will ask its QSModelAdapterProvider for an adapter for that record zone, if available. In the default configuration, the private database synchronizer is configured with one model adapter for a record zone named QSCloudKitCustomZoneName and your provided model, but no adapter provider. The shared database synchronizer is configured with an adapter provider that will create new Core Data stacks (or Realms) for each new record zone that gets added to the shared database."))}p.isMDXComponent=!0},8198:function(e,t,r){"use strict";t.Z=r.p+"assets/images/diagram-eb96ad8bdd169c782ace9edf50fd6350.png"}}]);