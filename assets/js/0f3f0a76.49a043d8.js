(window.webpackJsonp=window.webpackJsonp||[]).push([[6],{132:function(e,r,t){"use strict";t.d(r,"a",(function(){return s})),t.d(r,"b",(function(){return m}));var o=t(0),n=t.n(o);function a(e,r,t){return r in e?Object.defineProperty(e,r,{value:t,enumerable:!0,configurable:!0,writable:!0}):e[r]=t,e}function c(e,r){var t=Object.keys(e);if(Object.getOwnPropertySymbols){var o=Object.getOwnPropertySymbols(e);r&&(o=o.filter((function(r){return Object.getOwnPropertyDescriptor(e,r).enumerable}))),t.push.apply(t,o)}return t}function p(e){for(var r=1;r<arguments.length;r++){var t=null!=arguments[r]?arguments[r]:{};r%2?c(Object(t),!0).forEach((function(r){a(e,r,t[r])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(t)):c(Object(t)).forEach((function(r){Object.defineProperty(e,r,Object.getOwnPropertyDescriptor(t,r))}))}return e}function l(e,r){if(null==e)return{};var t,o,n=function(e,r){if(null==e)return{};var t,o,n={},a=Object.keys(e);for(o=0;o<a.length;o++)t=a[o],r.indexOf(t)>=0||(n[t]=e[t]);return n}(e,r);if(Object.getOwnPropertySymbols){var a=Object.getOwnPropertySymbols(e);for(o=0;o<a.length;o++)t=a[o],r.indexOf(t)>=0||Object.prototype.propertyIsEnumerable.call(e,t)&&(n[t]=e[t])}return n}var d=n.a.createContext({}),i=function(e){var r=n.a.useContext(d),t=r;return e&&(t="function"==typeof e?e(r):p(p({},r),e)),t},s=function(e){var r=i(e.components);return n.a.createElement(d.Provider,{value:r},e.children)},u={inlineCode:"code",wrapper:function(e){var r=e.children;return n.a.createElement(n.a.Fragment,{},r)}},b=n.a.forwardRef((function(e,r){var t=e.components,o=e.mdxType,a=e.originalType,c=e.parentName,d=l(e,["components","mdxType","originalType","parentName"]),s=i(t),b=o,m=s["".concat(c,".").concat(b)]||s[b]||u[b]||a;return t?n.a.createElement(m,p(p({ref:r},d),{},{components:t})):n.a.createElement(m,p({ref:r},d))}));function m(e,r){var t=arguments,o=r&&r.mdxType;if("string"==typeof e||o){var a=t.length,c=new Array(a);c[0]=b;var p={};for(var l in r)hasOwnProperty.call(r,l)&&(p[l]=r[l]);p.originalType=e,p.mdxType="string"==typeof e?e:o,c[1]=p;for(var d=2;d<a;d++)c[d]=t[d];return n.a.createElement.apply(null,c)}return n.a.createElement.apply(null,t)}b.displayName="MDXCreateElement"},68:function(e,r,t){"use strict";t.r(r),t.d(r,"frontMatter",(function(){return c})),t.d(r,"metadata",(function(){return p})),t.d(r,"toc",(function(){return l})),t.d(r,"default",(function(){return i}));var o=t(3),n=t(7),a=(t(0),t(132)),c={},p={unversionedId:"RealmAPI/protocols/RealmAdapterRecordProcessing",id:"RealmAPI/protocols/RealmAdapterRecordProcessing",isDocsHomePage:!1,title:"RealmAdapterRecordProcessing",description:"PROTOCOL",source:"@site/docs/RealmAPI/protocols/RealmAdapterRecordProcessing.md",slug:"/RealmAPI/protocols/RealmAdapterRecordProcessing",permalink:"/SyncKit/RealmAPI/protocols/RealmAdapterRecordProcessing",editUrl:"https://github.com/facebook/docusaurus/edit/master/website/docs/RealmAPI/protocols/RealmAdapterRecordProcessing.md",version:"current",sidebar:"api",previous:{title:"RealmAdapterDelegate",permalink:"/SyncKit/RealmAPI/protocols/RealmAdapterDelegate"},next:{title:"MultiRealmCollectionChange",permalink:"/SyncKit/RealmAPI/enums/MultiRealmCollectionChange"}},l=[{value:"Methods",id:"methods",children:[{value:"<code>shouldProcessPropertyBeforeUpload(propertyName:object:record:)</code>",id:"shouldprocesspropertybeforeuploadpropertynameobjectrecord",children:[]},{value:"<code>shouldProcessPropertyInDownload(propertyName:object:record:)</code>",id:"shouldprocesspropertyindownloadpropertynameobjectrecord",children:[]}]}],d={toc:l};function i(e){var r=e.components,t=Object(n.a)(e,["components"]);return Object(a.b)("wrapper",Object(o.a)({},d,t,{components:r,mdxType:"MDXLayout"}),Object(a.b)("p",null,Object(a.b)("strong",{parentName:"p"},"PROTOCOL")),Object(a.b)("h1",{id:"realmadapterrecordprocessing"},Object(a.b)("inlineCode",{parentName:"h1"},"RealmAdapterRecordProcessing")),Object(a.b)("pre",null,Object(a.b)("code",{parentName:"pre",className:"language-swift"},"@objc public protocol RealmAdapterRecordProcessing: class\n")),Object(a.b)("h2",{id:"methods"},"Methods"),Object(a.b)("h3",{id:"shouldprocesspropertybeforeuploadpropertynameobjectrecord"},Object(a.b)("inlineCode",{parentName:"h3"},"shouldProcessPropertyBeforeUpload(propertyName:object:record:)")),Object(a.b)("pre",null,Object(a.b)("code",{parentName:"pre",className:"language-swift"},"func shouldProcessPropertyBeforeUpload(propertyName: String, object: RLMObject, record: CKRecord) -> Bool\n")),Object(a.b)("p",null,"  Called by the adapter before copying a property from the Realm object to the CloudKit record to upload to CloudKit.\nThe method can then apply custom logic to encode the property in the record."),Object(a.b)("p",null,"  @param propertyname     The name of the property that is being processed\n@param object   The ",Object(a.b)("inlineCode",{parentName:"p"},"RLMObject")," that is going to have its record uploaded.\n@param record   The ",Object(a.b)("inlineCode",{parentName:"p"},"CKRecord")," that is being configured before being sent to CloudKit."),Object(a.b)("p",null,"  @return Boolean indicating whether the adapter should process property normally. Return false if property was already handled in this method."),Object(a.b)("h3",{id:"shouldprocesspropertyindownloadpropertynameobjectrecord"},Object(a.b)("inlineCode",{parentName:"h3"},"shouldProcessPropertyInDownload(propertyName:object:record:)")),Object(a.b)("pre",null,Object(a.b)("code",{parentName:"pre",className:"language-swift"},"func shouldProcessPropertyInDownload(propertyName: String, object: RLMObject, record: CKRecord) -> Bool\n")),Object(a.b)("p",null,"  Called by the adapter before copying a property from the CloudKit record that was just downloaded to the Realm object.\nThe method can apply custom logic to save the property from the record to the object. An object implementing this method ",Object(a.b)("em",{parentName:"p"},"should not")," change the record itself."),Object(a.b)("p",null,"  @param propertyname     The name of the property that is being processed\n@param object   The ",Object(a.b)("inlineCode",{parentName:"p"},"RLMObject")," that corresponds to the downloaded record.\n@param record   The ",Object(a.b)("inlineCode",{parentName:"p"},"CKRecord")," that was downloaded from CloudKit."),Object(a.b)("p",null,"  @return Boolean indicating whether the adapter should process property normally. Return false if property was already handled in this method."))}i.isMDXComponent=!0}}]);