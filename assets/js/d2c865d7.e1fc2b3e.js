(self.webpackChunkdocs_synckit=self.webpackChunkdocs_synckit||[]).push([[2249],{3905:function(e,t,r){"use strict";r.d(t,{Zo:function(){return u},kt:function(){return d}});var n=r(7294);function a(e,t,r){return t in e?Object.defineProperty(e,t,{value:r,enumerable:!0,configurable:!0,writable:!0}):e[t]=r,e}function o(e,t){var r=Object.keys(e);if(Object.getOwnPropertySymbols){var n=Object.getOwnPropertySymbols(e);t&&(n=n.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),r.push.apply(r,n)}return r}function l(e){for(var t=1;t<arguments.length;t++){var r=null!=arguments[t]?arguments[t]:{};t%2?o(Object(r),!0).forEach((function(t){a(e,t,r[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(r)):o(Object(r)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(r,t))}))}return e}function i(e,t){if(null==e)return{};var r,n,a=function(e,t){if(null==e)return{};var r,n,a={},o=Object.keys(e);for(n=0;n<o.length;n++)r=o[n],t.indexOf(r)>=0||(a[r]=e[r]);return a}(e,t);if(Object.getOwnPropertySymbols){var o=Object.getOwnPropertySymbols(e);for(n=0;n<o.length;n++)r=o[n],t.indexOf(r)>=0||Object.prototype.propertyIsEnumerable.call(e,r)&&(a[r]=e[r])}return a}var c=n.createContext({}),p=function(e){var t=n.useContext(c),r=t;return e&&(r="function"==typeof e?e(t):l(l({},t),e)),r},u=function(e){var t=p(e.components);return n.createElement(c.Provider,{value:t},e.children)},m={inlineCode:"code",wrapper:function(e){var t=e.children;return n.createElement(n.Fragment,{},t)}},s=n.forwardRef((function(e,t){var r=e.components,a=e.mdxType,o=e.originalType,c=e.parentName,u=i(e,["components","mdxType","originalType","parentName"]),s=p(r),d=a,f=s["".concat(c,".").concat(d)]||s[d]||m[d]||o;return r?n.createElement(f,l(l({ref:t},u),{},{components:r})):n.createElement(f,l({ref:t},u))}));function d(e,t){var r=arguments,a=t&&t.mdxType;if("string"==typeof e||a){var o=r.length,l=new Array(o);l[0]=s;var i={};for(var c in t)hasOwnProperty.call(t,c)&&(i[c]=t[c]);i.originalType=e,i.mdxType="string"==typeof e?e:a,l[1]=i;for(var p=2;p<o;p++)l[p]=r[p];return n.createElement.apply(null,l)}return n.createElement.apply(null,r)}s.displayName="MDXCreateElement"},7062:function(e,t,r){"use strict";r.r(t),r.d(t,{frontMatter:function(){return i},contentTitle:function(){return c},metadata:function(){return p},toc:function(){return u},default:function(){return s}});var n=r(2122),a=r(9756),o=(r(7294),r(3905)),l=["components"],i={},c="RealmAdapterDelegate",p={unversionedId:"api/realm/RealmAdapterDelegate",id:"api/realm/RealmAdapterDelegate",isDocsHomePage:!1,title:"RealmAdapterDelegate",description:"` swift",source:"@site/docs/api/realm/RealmAdapterDelegate.md",sourceDirName:"api/realm",slug:"/api/realm/RealmAdapterDelegate",permalink:"/SyncKit/api/realm/RealmAdapterDelegate",version:"current",frontMatter:{},sidebar:"API",previous:{title:"RealmAdapter",permalink:"/SyncKit/api/realm/RealmAdapter"},next:{title:"RealmAdapterRecordProcessing",permalink:"/SyncKit/api/realm/RealmAdapterRecordProcessing"}},u=[{value:"Requirements",id:"requirements",children:[{value:"RealmAdapter(_:\u200bgotChanges:\u200bobject:\u200b)",id:"realmadapter_gotchangesobject",children:[]}]}],m={toc:u};function s(e){var t=e.components,r=(0,a.Z)(e,l);return(0,o.kt)("wrapper",(0,n.Z)({},m,r,{components:t,mdxType:"MDXLayout"}),(0,o.kt)("h1",{id:"realmadapterdelegate"},"RealmAdapterDelegate"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-swift"},"@objc public protocol RealmAdapterDelegate \n")),(0,o.kt)("h2",{id:"requirements"},"Requirements"),(0,o.kt)("h3",{id:"realmadapter_gotchangesobject"},"RealmAdapter(","_",":\u200bgotChanges:\u200bobject:\u200b)"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-swift"},"func RealmAdapter(_ adapter: RealmAdapter, gotChanges changes: [String: Any], object: RLMObject)\n")),(0,o.kt)("ul",null,(0,o.kt)("li",{parentName:"ul"},"Asks the delegate to resolve conflicts for a managed object. The delegate is expected to examine the change dictionary and optionally apply any of those changes to the managed object."),(0,o.kt)("li",{parentName:"ul"}),(0,o.kt)("li",{parentName:"ul"},"@param adapter    The ",(0,o.kt)("inlineCode",{parentName:"li"},"QSRealmAdapter")," that is providing the changes."),(0,o.kt)("li",{parentName:"ul"},"@param changeDictionary Dictionary containing keys and values with changes for the managed object. Values can be ","[","NSNull null","]"," to represent a nil value."),(0,o.kt)("li",{parentName:"ul"},"@param object           The ",(0,o.kt)("inlineCode",{parentName:"li"},"RLMObject")," that has changed on iCloud.")))}s.isMDXComponent=!0}}]);